{
  "A2L-File": {
    "ASAP2_VERSION": {
      "VersionNo": "1",
      "UpgradeNo": "71"
    },
    "PROJECT": {
      "Name": "ASAP2_Example",
      "LongIdentifier": "\"\"",
      "HEADER": {
        "Comment": "\"ASAP2 Example File\"",
        "PROJECT_NO": "P2016_09_AE_MCD_2MC_BS_V1_7_1_main",
        "VERSION": "\"V1.7.1\""
      },
      "MODULE": {
        "Name": "Example",
        "LongIdentifier": "\"\"",
        "A2ML": "block \"IF_DATA\" taggedunion if_data {\n\n\n/*  ==============================================================================================  */\n/*                                                                                                  */\n/*  ASAM XCP AML                                                                                    */\n/*                                                                                                  */\n/*  ==============================================================================================  */\n\n        \"XCP\" struct {\n          taggedstruct {\n            block \"PROTOCOL_LAYER\" struct {\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uchar;\n              uint;\n              enum {\n                \"BYTE_ORDER_MSB_LAST\" = 0,\n                \"BYTE_ORDER_MSB_FIRST\" = 1\n              };\n              enum {\n                \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                \"ADDRESS_GRANULARITY_WORD\" = 2,\n                \"ADDRESS_GRANULARITY_DWORD\" = 4\n              };\n              taggedstruct {\n                (\"OPTIONAL_CMD\" enum {\n                  \"GET_COMM_MODE_INFO\" = 251,\n                  \"GET_ID\" = 250,\n                  \"SET_REQUEST\" = 249,\n                  \"GET_SEED\" = 248,\n                  \"UNLOCK\" = 247,\n                  \"SET_MTA\" = 246,\n                  \"UPLOAD\" = 245,\n                  \"SHORT_UPLOAD\" = 244,\n                  \"BUILD_CHECKSUM\" = 243,\n                  \"TRANSPORT_LAYER_CMD\" = 242,\n                  \"USER_CMD\" = 241,\n                  \"DOWNLOAD\" = 240,\n                  \"DOWNLOAD_NEXT\" = 239,\n                  \"DOWNLOAD_MAX\" = 238,\n                  \"SHORT_DOWNLOAD\" = 237,\n                  \"MODIFY_BITS\" = 236,\n                  \"SET_CAL_PAGE\" = 235,\n                  \"GET_CAL_PAGE\" = 234,\n                  \"GET_PAG_PROCESSOR_INFO\" = 233,\n                  \"GET_SEGMENT_INFO\" = 232,\n                  \"GET_PAGE_INFO\" = 231,\n                  \"SET_SEGMENT_MODE\" = 230,\n                  \"GET_SEGMENT_MODE\" = 229,\n                  \"COPY_CAL_PAGE\" = 228,\n                  \"CLEAR_DAQ_LIST\" = 227,\n                  \"SET_DAQ_PTR\" = 226,\n                  \"WRITE_DAQ\" = 225,\n                  \"SET_DAQ_LIST_MODE\" = 224,\n                  \"GET_DAQ_LIST_MODE\" = 223,\n                  \"START_STOP_DAQ_LIST\" = 222,\n                  \"START_STOP_SYNCH\" = 221,\n                  \"GET_DAQ_CLOCK\" = 220,\n                  \"READ_DAQ\" = 219,\n                  \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                  \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                  \"GET_DAQ_LIST_INFO\" = 216,\n                  \"GET_DAQ_EVENT_INFO\" = 215,\n                  \"FREE_DAQ\" = 214,\n                  \"ALLOC_DAQ\" = 213,\n                  \"ALLOC_ODT\" = 212,\n                  \"ALLOC_ODT_ENTRY\" = 211,\n                  \"PROGRAM_START\" = 210,\n                  \"PROGRAM_CLEAR\" = 209,\n                  \"PROGRAM\" = 208,\n                  \"PROGRAM_RESET\" = 207,\n                  \"GET_PGM_PROCESSOR_INFO\" = 206,\n                  \"GET_SECTOR_INFO\" = 205,\n                  \"PROGRAM_PREPARE\" = 204,\n                  \"PROGRAM_FORMAT\" = 203,\n                  \"PROGRAM_NEXT\" = 202,\n                  \"PROGRAM_MAX\" = 201,\n                  \"PROGRAM_VERIFY\" = 200\n                })*;\n                \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                  \"BLOCK\" taggedstruct {\n                    \"SLAVE\" ;\n                    \"MASTER\" struct {\n                      uchar;\n                      uchar;\n                    };\n                  };\n                  \"INTERLEAVED\" uchar;\n                };\n                \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n              };\n            };\n            block \"SEGMENT\" struct {\n              uchar;\n              uchar;\n              uchar;\n              uchar;\n              uchar;\n              taggedstruct {\n                block \"CHECKSUM\" struct {\n                  enum {\n                    \"XCP_ADD_11\" = 1,\n                    \"XCP_ADD_12\" = 2,\n                    \"XCP_ADD_14\" = 3,\n                    \"XCP_ADD_22\" = 4,\n                    \"XCP_ADD_24\" = 5,\n                    \"XCP_ADD_44\" = 6,\n                    \"XCP_CRC_16\" = 7,\n                    \"XCP_CRC_16_CITT\" = 8,\n                    \"XCP_CRC_32\" = 9,\n                    \"XCP_USER_DEFINED\" = 255\n                  };\n                  taggedstruct {\n                    \"MAX_BLOCK_SIZE\" ulong;\n                    \"EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                (block \"PAGE\" struct {\n                  uchar;\n                  enum {\n                    \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                    \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                    \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                    \"ECU_ACCESS_DONT_CARE\" = 3\n                  };\n                  enum {\n                    \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                    \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                    \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                    \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                  };\n                  enum {\n                    \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                    \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                    \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                    \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                  };\n                  taggedstruct {\n                    \"INIT_SEGMENT\" uchar;\n                  };\n                })*;\n                (block \"ADDRESS_MAPPING\" struct {\n                  ulong;\n                  ulong;\n                  ulong;\n                })*;\n                \"PGM_VERIFY\" ulong;\n              };\n            };\n            block \"DAQ\" struct {\n              enum {\n                \"STATIC\" = 0,\n                \"DYNAMIC\" = 1\n              };\n              uint;\n              uint;\n              uchar;\n              enum {\n                \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n              };\n              enum {\n                \"ADDRESS_EXTENSION_FREE\" = 0,\n                \"ADDRESS_EXTENSION_ODT\" = 1,\n                \"ADDRESS_EXTENSION_DAQ\" = 3\n              };\n              enum {\n                \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n              };\n              enum {\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n              };\n              uchar;\n              enum {\n                \"NO_OVERLOAD_INDICATION\" = 0,\n                \"OVERLOAD_INDICATION_PID\" = 1,\n                \"OVERLOAD_INDICATION_EVENT\" = 2\n              };\n              taggedstruct {\n                \"PRESCALER_SUPPORTED\" ;\n                \"RESUME_SUPPORTED\" ;\n                block \"STIM\" struct {\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                  };\n                  uchar;\n                  taggedstruct {\n                    \"BIT_STIM_SUPPORTED\" ;\n                  };\n                };\n                block \"TIMESTAMP_SUPPORTED\" struct {\n                  uint;\n                  enum {\n                    \"NO_TIME_STAMP\" = 0,\n                    \"SIZE_BYTE\" = 1,\n                    \"SIZE_WORD\" = 2,\n                    \"SIZE_DWORD\" = 4\n                  };\n                  enum {\n                    \"UNIT_1NS\" = 0,\n                    \"UNIT_10NS\" = 1,\n                    \"UNIT_100NS\" = 2,\n                    \"UNIT_1US\" = 3,\n                    \"UNIT_10US\" = 4,\n                    \"UNIT_100US\" = 5,\n                    \"UNIT_1MS\" = 6,\n                    \"UNIT_10MS\" = 7,\n                    \"UNIT_100MS\" = 8,\n                    \"UNIT_1S\" = 9\n                  };\n                  taggedstruct {\n                    \"TIMESTAMP_FIXED\" ;\n                  };\n                };\n                \"PID_OFF_SUPPORTED\" ;\n                (block \"DAQ_LIST\" struct {\n                  uint;\n                  taggedstruct {\n                    \"DAQ_LIST_TYPE\" enum {\n                      \"DAQ\" = 1,\n                      \"STIM\" = 2,\n                      \"DAQ_STIM\" = 3\n                    };\n                    \"MAX_ODT\" uchar;\n                    \"MAX_ODT_ENTRIES\" uchar;\n                    \"FIRST_PID\" uchar;\n                    \"EVENT_FIXED\" uint;\n                    block \"PREDEFINED\" taggedstruct {\n                      (block \"ODT\" struct {\n                        uchar;\n                        taggedstruct {\n                          (\"ODT_ENTRY\" struct {\n                            uchar;\n                            ulong;\n                            uchar;\n                            uchar;\n                            uchar;\n                          })*;\n                        };\n                      })*;\n                    };\n                  };\n                })*;\n                (block \"EVENT\" struct {\n                  char[101];\n                  char[9];\n                  uint;\n                  enum {\n                    \"DAQ\" = 1,\n                    \"STIM\" = 2,\n                    \"DAQ_STIM\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                })*;\n              };\n            };\n            block \"PAG\" struct {\n              uchar;\n              taggedstruct {\n                \"FREEZE_SUPPORTED\" ;\n              };\n            };\n            block \"PGM\" struct {\n              enum {\n                \"PGM_MODE_ABSOLUTE\" = 1,\n                \"PGM_MODE_FUNCTIONAL\" = 2,\n                \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n              };\n              uchar;\n              uchar;\n              taggedstruct {\n                (block \"SECTOR\" struct {\n                  char[101];\n                  uchar;\n                  ulong;\n                  ulong;\n                  uchar;\n                  uchar;\n                  uchar;\n                })*;\n                \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                  \"BLOCK\" taggedstruct {\n                    \"SLAVE\" ;\n                    \"MASTER\" struct {\n                      uchar;\n                      uchar;\n                    };\n                  };\n                  \"INTERLEAVED\" uchar;\n                };\n              };\n            };\n            block \"DAQ_EVENT\" taggedunion {\n              \"FIXED_EVENT_LIST\" taggedstruct {\n                (\"EVENT\" uint)*;\n              };\n              \"VARIABLE\" taggedstruct {\n                block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                  (\"EVENT\" uint)*;\n                };\n                block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                  (\"EVENT\" uint)*;\n                };\n              };\n            };\n            block \"XCP_ON_CAN\" struct {\n              uint;\n              taggedstruct {\n                \"CAN_ID_BROADCAST\" ulong;\n                \"CAN_ID_MASTER\" ulong;\n                \"CAN_ID_SLAVE\" ulong;\n                \"BAUDRATE\" ulong;\n                \"SAMPLE_POINT\" uchar;\n                \"SAMPLE_RATE\" enum {\n                  \"SINGLE\" = 1,\n                  \"TRIPLE\" = 3\n                };\n                \"BTL_CYCLES\" uchar;\n                \"SJW\" uchar;\n                \"SYNC_EDGE\" enum {\n                  \"SINGLE\" = 1,\n                  \"DUAL\" = 2\n                };\n                \"MAX_DLC_REQUIRED\" ;\n                (block \"DAQ_LIST_CAN_ID\" struct {\n                  uint;\n                  taggedstruct {\n                    \"VARIABLE\" ;\n                    \"FIXED\" ulong;\n                  };\n                })*;\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_SxI\" struct {\n              uint;\n              ulong;\n              taggedstruct {\n                \"ASYNCH_FULL_DUPLEX_MODE\" struct {\n                  enum {\n                    \"PARITY_NONE\" = 0,\n                    \"PARITY_ODD\" = 1,\n                    \"PARITY_EVEN\" = 2\n                  };\n                  enum {\n                    \"ONE_STOP_BIT\" = 1,\n                    \"TWO_STOP_BITS\" = 2\n                  };\n                };\n                \"SYNCH_FULL_DUPLEX_MODE_BYTE\" ;\n                \"SYNCH_FULL_DUPLEX_MODE_WORD\" ;\n                \"SYNCH_FULL_DUPLEX_MODE_DWORD\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_BYTE\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_WORD\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_DWORD\" ;\n              };\n              enum {\n                \"HEADER_LEN_BYTE\" = 0,\n                \"HEADER_LEN_CTR_BYTE\" = 1,\n                \"HEADER_LEN_WORD\" = 2,\n                \"HEADER_LEN_CTR_WORD\" = 3\n              };\n              enum {\n                \"NO_CHECKSUM\" = 0,\n                \"CHECKSUM_BYTE\" = 1,\n                \"CHECKSUM_WORD\" = 2\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_TCP_IP\" struct {\n              uint;\n              uint;\n              taggedunion {\n                \"HOST_NAME\" char[256];\n                \"ADDRESS\" char[15];\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_UDP_IP\" struct {\n              uint;\n              uint;\n              taggedunion {\n                \"HOST_NAME\" char[256];\n                \"ADDRESS\" char[15];\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_USB\" struct {\n              uint;\n              uint;\n              uint;\n              uchar;\n              enum {\n                \"HEADER_LEN_BYTE\" = 0,\n                \"HEADER_LEN_CTR_BYTE\" = 1,\n                \"HEADER_LEN_FILL_BYTE\" = 2,\n                \"HEADER_LEN_WORD\" = 3,\n                \"HEADER_LEN_CTR_WORD\" = 4,\n                \"HEADER_LEN_FILL_WORD\" = 5\n              };\n              taggedunion {\n                block \"OUT_EP_CMD_STIM\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n              };\n              taggedunion {\n                block \"IN_EP_RESERR_DAQ_EVSERV\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n              };\n              taggedstruct {\n                \"ALTERNATE_SETTING_NO\" uchar;\n                \"INTERFACE_STRING_DESCRIPTOR\" char[101];\n                (block \"OUT_EP_ONLY_STIM\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                })*;\n                (block \"IN_EP_ONLY_DAQ\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                })*;\n                block \"IN_EP_ONLY_EVSERV\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n                (block \"DAQ_LIST_USB_ENDPOINT\" struct {\n                  uint;\n                  taggedstruct {\n                    \"FIXED_IN\" uchar;\n                    \"FIXED_OUT\" uchar;\n                  };\n                })*;\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n          };\n        };\n\n/****************************************************************************/\n/*                                                                          */\n/*   ASAP2 Meta description for ETK                                         */\n/*   - only applicable with ASAP2 V1.3 -                                    */\n/*                                                                          */\n/*   Used data types:                                                       */\n/*                                                                          */\n/*   A2ML       ASAP2          Windows  Explanation                         */\n/*   ---------------------------------------------------------              */\n/*   uchar      UBYTE          BYTE     unsigned 8 Bit                      */\n/*   char       SBYTE          char     signed 8 Bit                        */\n/*   uint       UWORD          WORD     unsigned integer 16 Bit             */\n/*   int        SWORD          int      signed integer 16 Bit               */\n/*   ulong      ULONG          DWORD    unsigned integer 32 Bit             */\n/*   long       SLONG          LONG     signed integer 32 Bit               */\n/*   float      FLOAT32_IEEE            float 32 Bit                        */\n/*                                                                          */\n/*  Changes:                                                                */\n/*  26.04.99 Hn  closing bracket at 'ADDRESS_MAPPING' added,                */\n/*               Keyword 'RESERVED' changed to 'RESERVED_DISTAB_MEMORY'     */\n/*                                                                          */\n/*  06.07.99 Hn  (V1.0.1) closing bracket at 'ADDRESS_MAPPING' changed to'}'*/\n/*                                                                          */\n/*  03.07.00 Hn  (V1.1.0) New element 'ETK_PRESENCE_CHECK' added to TP-Blob */\n/*                                                                          */\n/*  03.07.01 Hn  (V1.2.0) New element 'COLDSTART_HANDSHAKE' added to TP-Blob*/\n/*                        Parameter 'PBA' deleted                           */\n/*                        New parameter 'InterFaceSpeed' added              */\n/*                                                                          */\n/*                        New QP-Blob for 32 trigger measurement/bypass     */\n/*                                                                          */\n/*  11.01.02 Lug (V1.3.0) RESERVED_DISTAB_MEMORY' section expanded          */\n/*                        New TP_BLOB Version 0x01000101                    */\n/*                                                                          */\n/*  12.07.02 Wnl (V1.4.0) New QP-BLOB Version 0x00000101                    */\n/*                        Parameter 'Max. Read Variables' added             */\n/*                        Parameter 'Max. Write Variables' added            */\n/*                                                                          */\n/*  02.10.02 Wnl (V1.4.0) KP_Blob extension                                 */\n/*                        - enum for address location                       */\n/*                        - default RASTER                                  */\n/*                                                                          */\n/*  10.09.03 Wnl (V1.5.0) New TP_BLOB Version 0x01000102:                   */\n/*                        New Parameter for CODE_CHK                        */\n/*                          PERMANENT_RESET / NO_RESET                      */\n/*                        New TP_BLOB entry OVERLAY_CONFIG_TABLE            */\n/*                       - CODE_CHK maxByte 4 -> 32                         */\n/*                                                                          */\n/*  12.04.05 Wnl (V1.6.0) New TP_BLOB Version 0x01000103:                   */\n/*                        New TP_BLOB entry CAL_WAKEUP                      */\n/*                        New TP_BLOB entry PAGE_SWITCH_METHOD              */\n/*                                                                          */\n/****************************************************************************/\n\n/****************************************************************************/\n/*                                                                          */\n/* For a correct working of the ETK, the following MEMORY_SEGMENTs have to  */\n/* be specified in the section 'MOD_PAR' of the ASAP2 file:                 */\n/*                                                                          */\n/*  /begin MEMORY_SEGMENT                                                   */\n/*     Dataxxxx \"\"  DATA FLASH <mem. location> <address> <size> <mirrors>   */\n/*  /end MEMORY_SEGMENT                                                     */\n/*                                                                          */\n/*  /begin MEMORY_SEGMENT                                                   */\n/*     Codexxxx \"\"  CODE FLASH <mem. location> <address> <size> <mirrors>   */\n/*  /end MEMORY_SEGMENT                                                     */\n/*                                                                          */\n/*  /begin MEMORY_SEGMENT                                                   */\n/*     ExRAM \"ExRAM for DISTAB\" VARIABLES RAM EXTERN <address><size><mirrors>*/\n/*  /end MEMORY_SEGMENT                                                     */\n/*                                                                          */\n/*  Remark: All data included in a hex file, but not specified by a memory  */\n/*          segment will be ignored inside the application program and lost */\n/*          when generating hex file export                                 */\n/*                                                                          */\n/****************************************************************************/\n        \n        \"ETK\" taggedstruct\n        {\n          /* Description of an address mapping between addresses in the view of the */\n          /* EPROM of the ECU (and ASAP2) and the addresses in the scope of the ETK */\n          /* IF_DATA section used with MEMORY_SEGMENT (can be missing if no         */\n          /* differences between the 2 views)                                       */\n        \n          (\"ADDRESS_MAPPING\" struct \n            {\n             ulong;              /* Start address of MEMORY_SEGMENT                 */\n             ulong;              /* mapped start address for ETK                    */\n             ulong;              /* Length of mapped address range                  */\n            }\n           )*;                   /* multiple use of ADDRESS_MAPPING is possible     */\n                                 /* (even each MEMORY_SEGMENT)                      */\n        \n        \n          (block \"SOURCE\" struct\n          {\n          /* Description of the acquisition (trigger) levels supplied by the ECU,   */\n          /* 3 is max. no. for ETK                                                  */\n        \n            struct\n            {\n              char [100];        /* Source name                                     */\n              int;               /* CSE unit according to Asap1b (minimal period    */\n                                 /* duration) of the acqisition raster              */\n              long;              /* Minimal period number measured in the CSE unit  */\n            };\n            taggedstruct\n            {\n              \"QP_BLOB\" struct\n              {\n              /* Description of additional information needed by the ETK device     */\n              /* driver to collect the measurement data from a certain              */\n              /* acquisition raster                                                 */\n                uint;            /* version number, high byte must be >=1 to be     */\n                                 /* able to distinguish old versions without        */\n                                 /* version numbers current value: 0x101 (V1.1)     */\n                uint;            /* hardware trigger number (1..32)                 */\n                enum {           /* trigger type                                    */\n                  \"DIRECT\"=1,\n                  \"INDIRECT\"=2\n                };\n                uint;            /* raster priority (1..32), higher number = higher */\n                                 /* priority                                        */\n                enum {           /* assigned application                            */\n                  \"MEASUREMENT\"=0,\n                  \"BYPASS\"=1\n                }; \n                ulong;           /* address of trigger flag (only valid if trigger  */\n                                 /* type INDIRECT)                                  */\n                uint;            /* maximum length of display table in bytes        */\n                ulong;           /* start address of display table                  */\n                ulong;           /* output address of display table                 */\n                uint;            /* max. size of bypass receive table               */\n                ulong;           /* start address of address table for bypass       */\n                                 /* output - Xpass compatible Bypass only !!        */\n                ulong;           /* output address of the bypass table              */\n                ulong;           /* worst case minimum raster time in us            */\n                                 /* (1000 = 1ms raster)                             */\n                uint;            /* maximum read variables                          */\n                uint;            /* maximum write variables                         */\n              };\n            };\n          })*;                   /* SOURCE can be used several times                */\n        \n          block \"TP_BLOB\" struct\n          {\n          /* Description of additional information needed to configure the ETK      */\n          /* device driver for measurement and calibration                          */\n        \n            ulong;               /* Version number of the TP-Blob; uppermost byte   */\n                                 /* is always != 0, so that informations cannot be  */\n                                 /* mixed up with older blob versions (trigger      */\n                                 /* address was previously at the first position    */\n                                 /* and had max. 24 Bit)                            */\n                                 /* current value: 0x01000103                       */\n            enum {               /* fix comm speed on ETK line to 8/100 MBit/s      */\n              \"INTERFACE_SPEED_8MBIT\"   = 1,\n              \"INTERFACE_SPEED_100MBIT\" = 2\n            };\n            ulong;               /* ETKP: RESET_CFG parameter only for PPC family   */\n        \n            taggedstruct {\n        \n              block \"DISTAB_CFG\" struct\n              {\n                uint;            /* Type of display table (13 recommended,   DSPTAB */\n                                 /* 12, 11, 20 only for old projects)               */\n                uint;            /* Data type display table: 1=byte 2=word  DAT_MOD */\n                                 /* additional code table for distab 13 depending   */\n                                 /* on bus width / bus access                       */\n                                 /* (see distab 13 spec. for more information)      */\n                uint;            /* Byte order 1 = high first, 2 = low first    RFG */\n                ulong;           /* Trigger segment address                TRGSEGAD */\n                ulong;           /* Trigger configuration  (special code)   TRG_CFG */\n                taggedstruct {\n                  \"TRG_MOD\" ( uchar)*; /* Dyn. length for                   TRG_MOD */\n                                       /* (special code)                            */\n                };\n              };\n        \n              \"CODE_CHK\" struct \n              {\n              /* A check, whether program and data are matching can be performed,   */\n              /* if the ECU copies a certain 'program identifier' (e.g. the code    */\n              /* checksum) into the external RAM and the same identifier is stored  */\n              /* in the data range. The ETK driver can read and compare both        */\n              /* identifier and issue an error message, if the both identifiers do  */\n              /*  not match.                                                        */\n        \n                ulong;           /* ETK: address of program identifier in the data  */\n                                 /* range PRG_DATA                                  */\n                uint;            /* ETK: length of program identifier in the data   */\n                                 /* range (max. 32 bytes)                           */\n                ulong;           /* ETK: address of program identifier in the       */\n                                 /* external RAM PRG_ERAM                           */\n                uint;            /* ETK: length of program identifier in the        */\n                                 /* external RAM (max. 32 bytes)                    */\n                /* If all parameters contain 0x0 values, no check is performed      */\n        \n                taggedstruct {\n                  \"ERROR_BEHAVIOR\" enum {       /* reaction of MC tool to ECU when  */\n                    \"PERMANENT_RESET\" = 0,      /* code check fails                 */\n                    \"NO_RESET\"        = 1\n                  };\n                };\n              };\n        \n              \"ETK_CFG\" ( uchar)*; /* ETK_CFG parameters (dyn. length)              */\n              /* Description of ETK configuration parameters, as configured with    */\n              /* the ETK configuration tool                                         */\n        \n              ( \"EMU_DATA\" struct \n              {\n              /* Additional description of data ranges overwriting the              */\n              /* MEMORY_SEGMENT description                                         */\n        \n                ulong;           /* Start address                                   */\n                ulong;           /* Length in bytes                                 */\n                enum {           /* Memory attribute                                */\n                  \"INTERN\"  = 0,\n                  \"EXTERN\"  = 1\n                };\n                                 /* Description of offsets to additional data       */\n                                 /* ranges where the contents of this data range    */\n                                 /* are mirrored                                    */\n                ulong;           /* Mirror offset 1                                 */\n                ulong;           /* Mirror offset 2                                 */\n                ulong;           /* Mirror offset 3                                 */\n                ulong;           /* Mirror offset 4                                 */\n                ulong;           /* Mirror offset 5                                 */\n                                 /* Mirror offsets of -1 indicate that there is no  */\n                                 /* mirror offset                                   */\n              })*;\n        \n              ( \"EMU_CODE\" struct\n              {\n              /* Additional description of code ranges overwriting the              */\n              /* MEMORY_SEGMENT description                                         */\n        \n                ulong;           /* Start address                                   */\n                ulong;           /* Length in bytes                                 */\n                enum {           /* Memory attribute                                */\n                  \"INTERN\"  = 0,\n                  \"EXTERN\"  = 1\n                };\n                ulong;           /* Mirror offset 1                                 */\n                ulong;           /* Mirror offset 2                                 */\n                ulong;           /* Mirror offset 3                                 */\n                ulong;           /* Mirror offset 4                                 */\n                ulong;           /* Mirror offset 5                                 */\n              })*;\n        \n              ( \"EMU_RAM\" struct \n              {\n              /* Additional description of external RAM ranges overwriting the      */\n              /* MEMORY_SEGMENT description                                         */\n        \n                ulong;           /* Start address                                   */\n                ulong;           /* Length in bytes                                 */\n                enum {           /* Memory attribute                                */\n                  \"INTERN\"  = 0,\n                  \"EXTERN\"  = 1\n                };\n                ulong;           /* Mirror offset 1                                 */\n                ulong;           /* Mirror offset 2                                 */\n                ulong;           /* Mirror offset 3                                 */\n                ulong;           /* Mirror offset 4                                 */\n                ulong;           /* Mirror offset 5                                 */\n              })*;\n        \n              ( \"RESERVED_DISTAB_MEMORY\" struct \n              {\n              /* Description of 'reserved ranges' (especially in the data or code   */\n              /* ranges; e.g. location of the display tables) that are excluded     */\n              /* from checksum verification. If the 3 display tables stand close    */\n              /* together, the size of the reserved memory is calculated by the     */\n              /* following formula:                                                 */\n              /*          size = (highest start address of the 3 distabs)           */\n              /*                  + ((size of this distab) + 2) * 4                 */\n              /*                  - (lowest start address of the 3 distabs)         */\n        \n                ulong;           /* Start address                                   */\n                ulong;           /* Length in bytes                                 */\n                enum {           /* Location                                        */\n                  \"INTERN\"  = 0,\n                  \"EXTERN\"  = 1\n                };\n                enum {           /* application                                     */\n                  \"MEASUREMENT\" = 0,\n                  \"BYPASS\"    = 1\n                };\n                enum {           /* usage                                           */\n                  \"CHECKSUM_EXCLUDE_ONLY\" = 0,\n                  \"ECU_DISTAB_INPUT\"      = 1,\n                  \"ECU_DISTAB_OUTPUT\"     = 2,\n                  \"ECU_DISTAB_INOUT\"      = 3\n                };\n                ulong;           /* Mirror offset 1                                 */\n                ulong;           /* Mirror offset 2                                 */\n                ulong;           /* Mirror offset 3                                 */\n                ulong;           /* Mirror offset 4                                 */\n                ulong;           /* Mirror offset 5                                 */\n              })*;\n        \n              \"ETK_MAILBOX\" struct \n              {\n              /* Description of the ETK mailbox that is used for communication      */\n              /* between the ECU and the application program (e.g. for programming  */\n              /* data into the ECU flash)                                           */\n        \n                ulong;           /* Test pattern for the ECU to detect a valid      */\n                                 /* mailbox                                         */\n                enum {           /* Memory page (code, data, external RAM) used for */\n                                 /* communication from application program to ECU   */\n                  \"CODE\"  = 1,\n                  \"DATA\"  = 2,\n                  \"EXRAM\" = 3\n                };\n                ulong;           /* Base address of buffer for communication appl.  */\n                                 /* program -> ECU                                  */\n                ulong;           /* Length of buffer for comunication appl.         */\n                                 /* program -> ECU                                  */\n                enum {           /* Memory page (code, data, external RAM) used for */\n                                 /* communication from ECU to application program   */\n                  \"CODE\"  = 1,\n                  \"DATA\"  = 2,\n                  \"EXRAM\" = 3\n                };\n                ulong;           /* Base address of buffer for communication        */\n                                 /* ECU -> appl. program                            */\n                ulong;           /* Length of buffer for comunication               */\n                                 /* ECU -> appl. program                            */\n              };\n        \n              block \"ETK_PRESENCE_CHECK\" struct \n              {\n                ulong;           /* address of ETK recognition pattern              */\n                taggedstruct {\n                  \"ETK_PATTERN\" (uchar)*; /* Dyn. length for pattern                */\n                };\n              };\n        \n              block \"COLDSTART_HANDSHAKE\" struct \n              {\n                ulong;           /* address of ETKS cold start pattern              */\n                taggedstruct {\n                  \"WAIT\" ( uchar)*;   /* Dyn. length for 'wait' pattern             */\n                };\n                taggedstruct {\n                  \"READY\" ( uchar)*; /* Dyn. length for 'ready' pattern             */\n                };\n              };\n        \n              \"CAL_WAKEUP\" taggedstruct {\n                \"CAL_WAKEUP_PIN\" ulong;     /* 1 = wake up enabled, 0 = disabled    */\n                \"CAL_TOOL_PRESENT\" struct {\n                       ulong;               /* address for the pattern              */\n                       ulong;               /* pattern                              */\n                       ulong;               /* ECU timeout for shut down in s       */\n                };\n              };\n            };\n            taggedunion {\n              \"OVERLAY_CONFIG_TABLE\" struct {\n                ulong;           /* OCT_Type         Type of table                  */\n                ulong;           /* OCT_StartAddress Start address of table         */\n                ulong;           /* OCT_Length       max Length of table in byte    */\n                taggedstruct {\n                  \"AUTOSTART_BEHAVIOR\" enum {\n                    \"LAST_ACTIVE_PAGE\" = 0, /* Table to be filled with info         */\n                                            /* for the current active page          */\n                    \"ALWAYS_WP\"        = 1, /* Table to be filled always            */\n                                            /* with info for working page           */\n                    \"ALWAYS_RP\"        = 2  /* Table to be filled   always          */\n                                            /* with info for reference page         */\n                  };\n                };\n              };\n              \"PAGE_SWITCH_METHOD\" struct {\n                ulong;                      /* version                              */\n                taggedstruct {\n                  \"MAILBOX\" struct {\n                    ulong;           /* MBX_Version                                 */\n                                     /* Version of mailbox                          */\n                    ulong;           /* MBX_PageSetupTime                           */  \n                                     /* max time the ECU needs to set up page in ms */\n                    ulong;           /* MBX_StartAddress                            */\n                                     /* Start address of table                      */\n                  };\n        \n                  \"AUTOSTART_BEHAVIOR\" enum {\n                    \"LAST_ACTIVE_PAGE\" = 0, /* Table to be filled with info         */  \n                                            /* for the current active page          */\n                    \"ALWAYS_WP\"        = 1, /* Request field to be filled           */\n                                            /* always with info for working page    */\n                    \"ALWAYS_RP\"        = 2  /* Request field to be filled           */\n                                            /* always with info for reference page  */\n                  };\n        \n                  \"OCT_WORKINGPAGE\" struct {\n                    ulong;       /* OCT_Type         Type of table                  */\n                    ulong;       /* OCT_StartAddress Start address of table         */\n                    ulong;       /* OCT_Length       max Length of table in byte    */\n                  };\n        \n                  \"OCT_REFERENCEPAGE\" struct {\n                    ulong;       /* OCT_Type         Type of table                  */\n                    ulong;       /* OCT_StartAddress Start address of table         */\n                    ulong;       /* OCT_Length       max Length of table in byte    */\n                  };\n                };\n              };\n            };\n          };\n        \n          \"DP_BLOB\" struct\n          {\n          /* for CHARACTERISTIC and AXIS_PTS and MEMORY_LAYOUT                      */\n        \n            ulong;               /* start address for example of a map              */\n            ulong;               /* length of the map                               */\n          };\n        \n          \"KP_BLOB\" struct\n          {\n            ulong;               /* Start address of measurement variable           */\n            enum {               /* Address location                                */\n              \"INTERN\"  = 0,\n              \"EXTERN\"  = 1\n            };\n            uint;                /* Size of measurement in bytes                    */\n            taggedstruct {\n              (\"RASTER\" uchar )*;/* Array of event channel initialization values    */\n            };\n          };\n        };\n\n\n/*  ==============================================================================================  */\n/*                                                                                                  */\n/*  CANAPE_EXT AML                                                                                  */\n/*                                                                                                  */\n/*  ==============================================================================================  */\n\n        \"CANAPE_EXT\" struct {\n          int;             /* version number */\n          taggedstruct {\n            \"LINK_MAP\" struct {\n              char[256];   /* segment name */\n              long;        /* base address of the segment */\n              uint;        /* address extension of the segment */\n              uint;        /* flag: address is relative to DS */\n              long;        /* offset of the segment address */\n              uint;        /* datatypValid */\n              uint;        /* enum datatyp */\n              uint;        /* bit offset of the segment */\n            };\n            \"DISPLAY\" struct {\n              long;        /* display color */\n              double;      /* minimal display value (phys)*/\n              double;      /* maximal display value (phys)*/\n            };\n            \"VIRTUAL_CONVERSION\" struct {\n              char[256];   /* name of the conversion formula */\n            };\n          };\n        };\n\n\n      };",
        "MOD_COMMON": {
          "Comment": "\"\"",
          "ALIGNMENT_BYTE": "1",
          "ALIGNMENT_FLOAT32_IEEE": "4",
          "ALIGNMENT_FLOAT64_IEEE": "4",
          "ALIGNMENT_LONG": "4",
          "ALIGNMENT_WORD": "2",
          "BYTE_ORDER": "MSB_LAST",
          "DEPOSIT": "ABSOLUTE"
        },
        "MOD_PAR": {
          "Comment": "\"\"",
          "NO_OF_INTERFACES": "1",
          "MEMORY_SEGMENT": [
            {
              "Name": "ECU_Code",
              "LongIdentifier": "\"Memory segment for code part of the ECU\"",
              "PrgType": "DATA",
              "MemoryType": "FLASH",
              "Attribute": "EXTERN",
              "Address": "0x16000",
              "Size": "0x86C",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ],
              "IF_DATA": {
                "Name": "XCP",
                "DataParams": [],
                "SEGMENT": {
                  "Name": "SEGMENT",
                  "DataParams": [
                    "0x0",
                    "0x2",
                    "0x0",
                    "0x0",
                    "0x0"
                  ],
                  "PAGE": [
                    {
                      "Name": "PAGE",
                      "DataParams": [
                        "0x0",
                        "ECU_ACCESS_DONT_CARE",
                        "XCP_READ_ACCESS_WITH_ECU_ONLY",
                        "XCP_WRITE_ACCESS_NOT_ALLOWED"
                      ]
                    },
                    {
                      "Name": "PAGE",
                      "DataParams": [
                        "0x1",
                        "ECU_ACCESS_DONT_CARE",
                        "XCP_READ_ACCESS_WITH_ECU_ONLY",
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "Name": "ECU_Data",
              "LongIdentifier": "\"Memory segment for parameters\"",
              "PrgType": "DATA",
              "MemoryType": "FLASH",
              "Attribute": "EXTERN",
              "Address": "0x810000",
              "Size": "0x10000",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ]
            },
            {
              "Name": "ECU_Data_Instances",
              "LongIdentifier": "\"Memory segment for parameters based on typedef\"",
              "PrgType": "DATA",
              "MemoryType": "FLASH",
              "Attribute": "EXTERN",
              "Address": "0x820000",
              "Size": "0x10000",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ]
            },
            {
              "Name": "TRANSFORMER_CALIBRATION",
              "LongIdentifier": "\"Special calibration data area handled via transformation\"",
              "PrgType": "DATA",
              "MemoryType": "NOT_IN_ECU",
              "Attribute": "EXTERN",
              "Address": "0x7FFF0000",
              "Size": "0x00001000",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ]
            }
          ],
          "SYSTEM_CONSTANT": [
            {
              "Name": "\"System_Constant_1\"",
              "VALUE": "\"-3.45\""
            },
            {
              "Name": "\"System_Constant_2\"",
              "VALUE": "\"5.67\""
            },
            {
              "Name": "\"System_Constant_3\"",
              "VALUE": "\"Text in System Constant\""
            }
          ]
        },
        "AXIS_PTS": [
          {
            "Name": "ASAM.C.AXIS_PTS.UBYTE_8",
            "LongIdentifier": "\"Common axis for \"",
            "Address": "0x810340",
            "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
            "Deposit_Ref": "RL.AXIS_PTS.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "MaxAxisPoints": "8",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.AXIS_PTS.UBYTE_8"
          },
          {
            "Name": "ASAM.C.AXIS_PTS.RESCALE",
            "LongIdentifier": "\"Rescale Axis\"",
            "Address": "0x8103D0",
            "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
            "Deposit_Ref": "RL.AXIS_PTS.RES_AXIS",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "MaxAxisPoints": "5",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI_0x83BA20.VTAB.RE_AXIS.X_RE_AXIS_xU8"
          }
        ],
        "BLOB": {
          "Name": "ASAM.C.BLOB.TRANSFORMER_TEST",
          "LongIdentifier": "\"binary blob for transformer test\"",
          "Address": "0x812000",
          "Size": "16",
          "CALIBRATION_ACCESS": "NO_CALIBRATION"
        },
        "CHARACTERISTIC": [
          {
            "Name": "ASAM.C.SCALAR.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar FW U16 and CDF20 as name\"",
            "Type": "VALUE",
            "Address": "0x810000",
            "Deposit_Ref": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "10",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UBYTE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "256"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar SBYTE\"",
            "Type": "VALUE",
            "Address": "0x810001",
            "Deposit_Ref": "RL.FNC.SBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100",
            "UpperLimit": "100",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SBYTE.IDENTICAL",
            "FORMAT": "\"%6.1\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "65535",
            "BIT_MASK": "0xFFFF",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            },
            "ANNOTATION": {
              "ANNOTATION_LABEL": "\"ASAM Workinggroup\"",
              "ANNOTATION_ORIGIN": "\"\"",
              "ANNOTATION_TEXT": [
                "\"Test the A2L annotation\""
              ]
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "BIT_MASK": "0x0FF0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0001",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
            "FORMAT": "\"%5.0\"",
            "PHYS_UNIT": "\"\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0010",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
            "FORMAT": "\"%5.0\"",
            "PHYS_UNIT": "\"\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.RAT_FUNC.DIV_10",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.FORM.X_PLUS_4",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_INTP.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_VERB.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.RAT_FUNC.DIV_81_9175",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.ULONG.IDENTICAL",
            "LongIdentifier": "\"Scalar ULONG\"",
            "Type": "VALUE",
            "Address": "0x810008",
            "Deposit_Ref": "RL.FNC.ULONG.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-1000000",
            "UpperLimit": "2000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.ULONG.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000000",
              "UpperLimit": "20000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SLONG.IDENTICAL",
            "LongIdentifier": "\"Scalar SLONG\"",
            "Type": "VALUE",
            "Address": "0x81000C",
            "Deposit_Ref": "RL.FNC.SLONG.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-1000000",
            "UpperLimit": "2000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SLONG.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000000",
              "UpperLimit": "20000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
            "LongIdentifier": "\"Scalar FLOAT32_IEEE\"",
            "Type": "VALUE",
            "Address": "0x810010",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "10",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "256"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
            "LongIdentifier": "\"Scalar FLOAT64_IEEE\"",
            "Type": "VALUE",
            "Address": "0x810010",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000.0",
              "UpperLimit": "20000.0"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
            "LongIdentifier": "\"Array 3x4 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810100",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
            "LongIdentifier": "\"Array 3x4 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810120",
            "Deposit_Ref": "RL.FNC.SWORD.COLUMN_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR",
            "LongIdentifier": "\"Array 6 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810140",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "6"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ASCII.UBYTE.NUMBER_42",
            "LongIdentifier": "\"ASCII string\"",
            "Type": "ASCII",
            "Address": "0x810200",
            "Deposit_Ref": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ASCII.UBYTE.NUMBER_42",
            "NUMBER": "42"
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810300",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-255",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS",
            "FORMAT": "\"%8.3\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            },
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS.DISCRETE",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810300",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISCRETE": true,
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.CURVE.COM_AXIS",
            "LongIdentifier": "\"Curve with common axis\"",
            "Type": "CURVE",
            "Address": "0x810320",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.COM_AXIS",
            "AXIS_DESCR": {
              "Attribute": "COM_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "0",
              "UpperLimit": "255",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
            }
          },
          {
            "Name": "ASAM.C.CURVE.COM_AXIS_2",
            "LongIdentifier": "\"Curve with common axis\"",
            "Type": "CURVE",
            "Address": "0x810330",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.COM_AXIS",
            "AXIS_DESCR": {
              "Attribute": "COM_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "0",
              "UpperLimit": "255",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR_DIST\"",
            "Type": "CURVE",
            "Address": "0x810350",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_DIST": {
                "Offset": "1",
                "Distance": "1",
                "Numberapo": "6"
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR\"",
            "Type": "CURVE",
            "Address": "0x810360",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_DIST": {
                "Offset": "0",
                "Distance": "4",
                "Numberapo": "6"
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR_LIST\"",
            "Type": "CURVE",
            "Address": "0x810370",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_LIST": {
                "AxisPts_Value": [
                  "-1",
                  "4",
                  "6",
                  "8",
                  "9",
                  "10"
                ]
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.CURVE_AXIS",
            "LongIdentifier": "\"Curve with curve axis\"",
            "Type": "CURVE",
            "Address": "0x810380",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.COM_AXIS",
            "AXIS_DESCR": {
              "Attribute": "CURVE_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "NO_COMPU_METHOD",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "CURVE_AXIS_REF": "ASAM.C.CURVE_AXIS"
            }
          },
          {
            "Name": "ASAM.C.CURVE_AXIS",
            "LongIdentifier": "\"Curve used as axis\"",
            "Type": "CURVE",
            "Address": "0x810390",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE_AXIS",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.CURVE.RES_AXIS",
            "LongIdentifier": "\"Curve with rescale axis\"",
            "Type": "CURVE",
            "Address": "0x8103B0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.RES_AXIS",
            "AXIS_DESCR": {
              "Attribute": "RES_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "9",
              "LowerLimit": "0",
              "UpperLimit": "255",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.RESCALE"
            }
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810500",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "MONOTONY": "STRICT_INCREASE"
            }
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810900",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "MONOTONY": "STRICT_DECREASE"
            }
          },
          {
            "Name": "ASAM.C.MAP.STD_AXIS.STD_AXIS",
            "LongIdentifier": "\"Map with 2x standard axis\"",
            "Type": "MAP",
            "Address": "0x810400",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.STD_AXIS.STD_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.MAP.STD_AXIS.STD_AXIS.DISCRETE",
            "LongIdentifier": "\"Map with 2x standard axis\"",
            "Type": "MAP",
            "Address": "0x810400",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISCRETE": true,
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.STD_AXIS.STD_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
            "LongIdentifier": "\"Map with 1x standard axis and 1x fix axis\"",
            "Type": "MAP",
            "Address": "0x810440",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.COM_AXIS.FIX_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "0",
                "UpperLimit": "255",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS",
            "LongIdentifier": "\"CUBOID with COM_AXIS, FIX    _AXIS, STD_AXIS\"",
            "Type": "CUBOID",
            "Address": "0x810730",
            "Deposit_Ref": "RL.CUBOID.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "0",
                "UpperLimit": "255",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBOID.ROW_DIR",
            "LongIdentifier": "\"CUBOID with row oriented record layout\"",
            "Type": "CUBOID",
            "Address": "0x810530",
            "Deposit_Ref": "RL.CUBOID.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-127",
            "UpperLimit": "128",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBOID.ROW_DIR",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBOID.COLUMN_DIR",
            "LongIdentifier": "\"CUBOID with column oriented record layout\"",
            "Type": "CUBOID",
            "Address": "0x810560",
            "Deposit_Ref": "RL.CUBOID.COLUMN_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-127",
            "UpperLimit": "128",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBOID.COLUMN_DIR",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBE_4.ROW_DIR",
            "LongIdentifier": "\"CUBE_4 with row oriented record layout\"",
            "Type": "CUBE_4",
            "Address": "0x810590",
            "Deposit_Ref": "RL.CUBE_4.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-127",
            "UpperLimit": "128",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBE_4.ROW_DIR",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBE_4.COLUMN_DIR",
            "LongIdentifier": "\"CUBW_4 with column oriented record layout\"",
            "Type": "CUBE_4",
            "Address": "0x8105F0",
            "Deposit_Ref": "RL.CUBE_4.COLUMN_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-127",
            "UpperLimit": "128",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBE_4.COLUMN_DIR",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "2",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.MAP.COM_AXIS.FIX_AXIS_2",
            "LongIdentifier": "\"Map with 1x standard axis and 1x fix axis\"",
            "Type": "MAP",
            "Address": "0x810700",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.COM_AXIS.FIX_AXIS_2",
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "0",
                "UpperLimit": "255",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_1.SWORD",
            "LongIdentifier": "\"Dependent SWORD\"",
            "Type": "VALUE",
            "Address": "0x811000",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_1.SWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 5\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_2.UWORD",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x811102",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "65535.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_2.UWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 25\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_3.SWORD",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x811104",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_3.SWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.DEPENDENT.REF_1.SWORD",
                "ASAM.C.DEPENDENT.REF_2.UWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_4.FLOAT64_IEEE",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x811110",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_4.FLOAT64_IEEE",
            "FORMAT": "\"%8.2\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + sysc(System_Constant_1)\"",
              "CHARACTERISTIC": [
                "ASAM.C.DEPENDENT.REF_1.SWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_5.FLOAT64_IEEE",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x811108",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-10000.0",
            "UpperLimit": "10000.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_5.FLOAT64_IEEE",
            "FORMAT": "\"%8.2\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * 2\"",
              "CHARACTERISTIC": [
                "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.CURVE_1",
            "LongIdentifier": "\"Dependent curve: CHARACTERISTIC ASAM.C.CURVE.STD_AXIS\"",
            "Type": "CURVE",
            "Address": "0x811120",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "FORMAT": "\"%8.3\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1\"",
              "CHARACTERISTIC": [
                "ASAM.C.CURVE.STD_AXIS"
              ]
            },
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.CURVE_2",
            "LongIdentifier": "\"Dependent curve: CHARACTERISTIC ASAM.C.CURVE.STD_AXIS * 2\"",
            "Type": "CURVE",
            "Address": "0x811140",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "FORMAT": "\"%8.3\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * 2\"",
              "CHARACTERISTIC": [
                "ASAM.C.CURVE.STD_AXIS"
              ]
            },
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.CURVE_3",
            "LongIdentifier": "\"Dependent curve: (CHARACTERISTIC ASAM.C.SCALAR.SBYTE.IDENTICAL * ASAM.C.CURVE.STD_AXIS) - ASAM.C.SCALAR.UBYTE.IDENTICAL\"",
            "Type": "CURVE",
            "Address": "0x811160",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "FORMAT": "\"%8.3\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * X2 - X3\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.CURVE.STD_AXIS",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            },
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.CURVE_4",
            "LongIdentifier": "\"Dependent curve: ASAM.C.CURVE.COM_AXIS + ASAM.C.CURVE.COM_AXIS_2\"",
            "Type": "CURVE",
            "Address": "0x811180",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "FORMAT": "\"%8.3\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.CURVE.COM_AXIS",
                "ASAM.C.CURVE.COM_AXIS_2"
              ]
            },
            "AXIS_DESCR": {
              "Attribute": "COM_AXIS",
              "InputQuantity": "NO_INPUT_QUANTITY",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "0",
              "UpperLimit": "255",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.MAP_1",
            "LongIdentifier": "\"Dependent map: ASAM.C.MAP.STD_AXIS.STD_AXIS\"",
            "Type": "MAP",
            "Address": "0x811200",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1\"",
              "CHARACTERISTIC": [
                "ASAM.C.MAP.STD_AXIS.STD_AXIS"
              ]
            },
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.MAP_2",
            "LongIdentifier": "\"Dependent map: 2 * ASAM.C.MAP.STD_AXIS.STD_AXIS\"",
            "Type": "MAP",
            "Address": "0x811240",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"2 * X1\"",
              "CHARACTERISTIC": [
                "ASAM.C.MAP.STD_AXIS.STD_AXIS"
              ]
            },
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.MAP_3",
            "LongIdentifier": "\"Dependent map: (ASAM.C.SCALAR.SBYTE.IDENTICAL * ASAM.C.MAP.STD_AXIS.STD_AXIS) - ASAM.C.SCALAR.UBYTE.IDENTICAL\"",
            "Type": "MAP",
            "Address": "0x811280",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * X2 - X3\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.MAP.STD_AXIS.STD_AXIS",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            },
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "NO_INPUT_QUANTITY",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.MAP_4",
            "LongIdentifier": "\"Dependent map: ASAM.C.MAP.COM_AXIS.FIX_AXIS + ASAM.C.MAP.COM_AXIS.FIX_AXIS_2\"",
            "Type": "MAP",
            "Address": "0x8112C0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS_2"
              ]
            },
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "0",
                "UpperLimit": "255",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.ARRAY_1",
            "LongIdentifier": "\"Dependent array: ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR\"",
            "Type": "VAL_BLK",
            "Address": "0x811300",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1\"",
              "CHARACTERISTIC": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR"
              ]
            },
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.ARRAY_2",
            "LongIdentifier": "\"Dependent array: 2 * ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR\"",
            "Type": "VAL_BLK",
            "Address": "0x811340",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"2 * X1\"",
              "CHARACTERISTIC": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR"
              ]
            },
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.ARRAY_3",
            "LongIdentifier": "\"Dependent array: (ASAM.C.SCALAR.SBYTE.IDENTICAL * ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR) - ASAM.C.SCALAR.UBYTE.IDENTICAL\"",
            "Type": "VAL_BLK",
            "Address": "0x811380",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * X2 - X3\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            },
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.ARRAY_4",
            "LongIdentifier": "\"Dependent array: ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR + ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR\"",
            "Type": "VAL_BLK",
            "Address": "0x8113C0",
            "Deposit_Ref": "RL.FNC.SWORD.COLUMN_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4"
            ],
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR"
              ]
            },
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_1.SWORD",
            "LongIdentifier": "\"Virtual SWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_1.SWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 - 9\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_2.UWORD",
            "LongIdentifier": "\"Virtual UWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_2.UWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 19\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_3.SWORD",
            "LongIdentifier": "\"Virtual UWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_3.SWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.VIRTUAL.REF_1.SWORD",
                "ASAM.C.VIRTUAL.REF_2.UWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1",
            "LongIdentifier": "\"Virtual value including a system constant in the calculation formula\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1",
            "FORMAT": "\"%8.2\"",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + sysc(System_Constant_1)\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
            "LongIdentifier": "\"Wait Time for the transformer direction ECU to External (ECU side) in ms\"",
            "Type": "VALUE",
            "Address": "0x810800",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
            "LongIdentifier": "\"Wait Time for the reverse transformer direction ECU to External (ECU side) in ms\"",
            "Type": "VALUE",
            "Address": "0x810802",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1",
            "LongIdentifier": "\"Scalar as transformer input\"",
            "Type": "VALUE",
            "Address": "0x810804",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2",
            "LongIdentifier": "\"Scalar as transformer input\"",
            "Type": "VALUE",
            "Address": "0x810808",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3",
            "LongIdentifier": "\"Scalar as transformer input\"",
            "Type": "VALUE",
            "Address": "0x81080C",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0000",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_1\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0004",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0008",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF000C",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3",
            "FORMAT": "\"%3.12\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME",
            "LongIdentifier": "\"Wait Time for the transformer direction ECU to External (ECU side) in ms\"",
            "Type": "VALUE",
            "Address": "0x810820",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME_REVERSE",
            "LongIdentifier": "\"Wait Time for the reverse transformer direction ECU to External (ECU side) in ms\"",
            "Type": "VALUE",
            "Address": "0x810822",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME_REVERSE",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME_REVERSE\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0020",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_1\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME_REVERSE",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0022",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "10000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME_REVERSE",
            "FORMAT": "\"%3.0\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME_REVERSE\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_1",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0024",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_1",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_1\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_2",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0028",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_2",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_2\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_3",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF002C",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_3",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_3\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_4",
            "LongIdentifier": "\"Scalar as transformer output\"",
            "Type": "VALUE",
            "Address": "0x7FFF0030",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100000000000",
            "UpperLimit": "100000000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_4",
            "FORMAT": "\"%3.12\"",
            "MODEL_LINK": "\"ML.ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_4\"",
            "PHYS_UNIT": "\"hours\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-100000000000000000",
              "UpperLimit": "100000000000000000"
            }
          }
        ],
        "COMPU_METHOD": [
          {
            "Name": "CM.IDENTICAL",
            "LongIdentifier": "\"conversion that delivers always phys = int\"",
            "ConversionType": "IDENTICAL",
            "FORMAT": "\"%3.0\"",
            "UNIT": "\"hours\""
          },
          {
            "Name": "CM.LINEAR.IDENT",
            "LongIdentifier": "\"Linear function with parameter set for phys = f(int) = 1*int + 0\"",
            "ConversionType": "LINEAR",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS_LINEAR": {
              "a": "1",
              "b": "0"
            }
          },
          {
            "Name": "CM.LINEAR.IDENT.STATUS_STRING",
            "LongIdentifier": "\"Linear function with parameter set for phys = f(int) = 1*int + 0\"",
            "ConversionType": "LINEAR",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "STATUS_STRING_REF": "CM.TAB_VERB.STATUS_STRING.REF",
            "COEFFS_LINEAR": {
              "a": "1",
              "b": "0"
            }
          },
          {
            "Name": "CM.LINEAR.MUL_2",
            "LongIdentifier": "\"Linear function with parameter set for phys = f(int) = 2*int + 0\"",
            "ConversionType": "LINEAR",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS_LINEAR": {
              "a": "2",
              "b": "0"
            }
          },
          {
            "Name": "CM.RAT_FUNC.IDENT",
            "LongIdentifier": "\"rational function with parameter set for int = f(phys) = phys\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS": {
              "a": "0",
              "b": "1",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.RAT_FUNC.IDENT.STATUS_STRING",
            "LongIdentifier": "\"rational function with parameter set for int = f(phys) = phys\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "STATUS_STRING_REF": "CM.TAB_VERB.STATUS_STRING.REF",
            "COEFFS": {
              "a": "0",
              "b": "1",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.RAT_FUNC.DIV_10",
            "LongIdentifier": "\"rational function with parameter set for impl = f(phys) = phys * 10\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"km/h\"",
            "COEFFS": {
              "a": "0",
              "b": "10",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.RAT_FUNC.HYPERBOLIC",
            "LongIdentifier": "\"rational function with parameter set for impl = f(phys) = 1 / x\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"km/h\"",
            "COEFFS": {
              "a": "0",
              "b": "0",
              "c": "1",
              "d": "0",
              "e": "1",
              "f": "0"
            }
          },
          {
            "Name": "CM.RAT_FUNC.DIV_81_9175",
            "LongIdentifier": "\"rational function with parameter set for impl = f(phys) = phys * 81.9175\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"grad C\"",
            "COEFFS": {
              "a": "0",
              "b": "81.9175",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.FORM.X_PLUS_4",
            "LongIdentifier": "\"\"",
            "ConversionType": "FORM",
            "FORMAT": "\"%6.1\"",
            "UNIT": "\"rpm\"",
            "FORMULA": {
              "f_x": "\"X1+4\"",
              "FORMULA_INV": {
                "g_x": "\"X1-4\""
              }
            }
          },
          {
            "Name": "CM.VIRTUAL.EXTERNAL_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "FORM",
            "FORMAT": "\"%6.1\"",
            "UNIT": "\"rpm\"",
            "FORMULA": {
              "f_x": "\"4*X1\""
            }
          },
          {
            "Name": "CM.TAB_INTP.DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_INTP.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_INTP.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_NOINTP.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_NOINTP.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_VERB.DEFAULT_VALUE",
            "LongIdentifier": "\"Verbal conversion with default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%12.0\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.TAB_VERB.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Verbal conversion without default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%12.0\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.TAB_VERB.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "LongIdentifier": "\"verbal range with default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%4.2\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.VTAB_RANGE.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"verbal range without default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%4.2\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.VTAB_RANGE.NO_DEFAULT_VALUE.REF"
          }
        ],
        "COMPU_TAB": [
          {
            "Name": "CM.TAB_INTP.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ],
            "DEFAULT_VALUE_NUMERIC": "300.56"
          },
          {
            "Name": "CM.TAB_INTP.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ]
          },
          {
            "Name": "CM.TAB_NOINTP.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ],
            "DEFAULT_VALUE_NUMERIC": "300.56"
          },
          {
            "Name": "CM.TAB_NOINTP.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ]
          }
        ],
        "COMPU_VTAB": [
          {
            "Name": "CM.TAB_VERB.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"List of text strings and relation to impl value\"",
            "ConversionType": "TAB_VERB",
            "NumberValuePairs": "3",
            "InVal_OutVal": [
              [
                "1",
                "\"SawTooth\""
              ],
              [
                "2",
                "\"Square\""
              ],
              [
                "3",
                "\"Sinus\""
              ]
            ],
            "DEFAULT_VALUE": "\"unknown signal type\""
          },
          {
            "Name": "CM.TAB_VERB.STATUS_STRING.REF",
            "LongIdentifier": "\"List of text strings and relation to impl value\"",
            "ConversionType": "TAB_VERB",
            "NumberValuePairs": "3",
            "InVal_OutVal": [
              [
                "253",
                "\"Sensor not calibrated\""
              ],
              [
                "254",
                "\"Sensor not connected\""
              ],
              [
                "255",
                "\"Sensor defect\""
              ]
            ]
          },
          {
            "Name": "CM.TAB_VERB.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"List of text strings and relation to impl value\"",
            "ConversionType": "TAB_VERB",
            "NumberValuePairs": "6",
            "InVal_OutVal": [
              [
                "2",
                "\"red\""
              ],
              [
                "3",
                "\"orange\""
              ],
              [
                "4",
                "\"yellow\""
              ],
              [
                "5",
                "\"green\""
              ],
              [
                "6",
                "\"blue\""
              ],
              [
                "7",
                "\"violet\""
              ]
            ]
          }
        ],
        "COMPU_VTAB_RANGE": [
          {
            "Name": "CM.VTAB_RANGE.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "NumberValueTriples": "11",
            "InVal_MinMax_OutVal": [
              [
                "0",
                "1",
                "\"Zero_to_one\""
              ],
              [
                "2",
                "3",
                "\"two_to_three\""
              ],
              [
                "4",
                "7",
                "\"four_to_seven\""
              ],
              [
                "14",
                "17",
                "\"fourteen_to_seventeen\""
              ],
              [
                "18",
                "99",
                "\"eigteen_to_ninetynine\""
              ],
              [
                "100",
                "100",
                "\"hundred\""
              ],
              [
                "101",
                "101",
                "\"hundredone\""
              ],
              [
                "102",
                "102",
                "\"hundredtwo\""
              ],
              [
                "103",
                "103",
                "\"hundredthree\""
              ],
              [
                "104",
                "104",
                "\"hundredfour\""
              ],
              [
                "105",
                "105",
                "\"hundredfive\""
              ]
            ],
            "DEFAULT_VALUE": "\"out of range value\""
          },
          {
            "Name": "CM.VTAB_RANGE.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "NumberValueTriples": "11",
            "InVal_MinMax_OutVal": [
              [
                "0",
                "1",
                "\"Zero_to_one\""
              ],
              [
                "2",
                "3",
                "\"two_to_three\""
              ],
              [
                "4",
                "7",
                "\"four_to_seven\""
              ],
              [
                "14",
                "17",
                "\"fourteen_to_seventeen\""
              ],
              [
                "18",
                "99",
                "\"eigteen_to_ninetynine\""
              ],
              [
                "100",
                "100",
                "\"hundred\""
              ],
              [
                "101",
                "101",
                "\"hundredone\""
              ],
              [
                "102",
                "102",
                "\"hundredtwo\""
              ],
              [
                "103",
                "103",
                "\"hundredthree\""
              ],
              [
                "104",
                "104",
                "\"hundredfour\""
              ],
              [
                "105",
                "105",
                "\"hundredfive\""
              ]
            ]
          }
        ],
        "FUNCTION": [
          {
            "Name": "FunctionScalar",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SLONG.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.ULONG.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "SUB_FUNCTION": {
              "Identifier": [
                "FunctionDependentParameters"
              ]
            }
          },
          {
            "Name": "FunctionDependentParameters",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.DEPENDENT.REF_1.SWORD",
                "ASAM.C.DEPENDENT.REF_2.UWORD",
                "ASAM.C.DEPENDENT.REF_3.SWORD",
                "ASAM.C.DEPENDENT.REF_4.FLOAT64_IEEE",
                "ASAM.C.DEPENDENT.REF_5.FLOAT64_IEEE"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionComplexDependentArrays",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.DEPENDENT.ARRAY_1",
                "ASAM.C.DEPENDENT.ARRAY_2",
                "ASAM.C.DEPENDENT.ARRAY_3",
                "ASAM.C.DEPENDENT.ARRAY_4"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR"
              ]
            }
          },
          {
            "Name": "FunctionComplexDependentMaps",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.DEPENDENT.MAP_1",
                "ASAM.C.DEPENDENT.MAP_2",
                "ASAM.C.DEPENDENT.MAP_3",
                "ASAM.C.DEPENDENT.MAP_4"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS_2"
              ]
            }
          },
          {
            "Name": "FunctionComplexDependentCurves",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.DEPENDENT.CURVE_1",
                "ASAM.C.DEPENDENT.CURVE_2",
                "ASAM.C.DEPENDENT.CURVE_3",
                "ASAM.C.DEPENDENT.CURVE_4"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.AXIS_PTS.UBYTE_8",
                "ASAM.C.CURVE.COM_AXIS",
                "ASAM.C.CURVE.COM_AXIS_2",
                "ASAM.C.CURVE.STD_AXIS"
              ]
            }
          },
          {
            "Name": "FunctionCurve",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CURVE.STD_AXIS.DISCRETE",
                "ASAM.C.CURVE.RES_AXIS"
              ]
            },
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionCurveAxis",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CURVE_AXIS",
                "ASAM.C.CURVE.CURVE_AXIS"
              ]
            },
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionMap",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
                "ASAM.C.MAP.STD_AXIS.STD_AXIS",
                "ASAM.C.MAP.STD_AXIS.STD_AXIS.DISCRETE"
              ]
            },
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE"
              ]
            }
          },
          {
            "Name": "FunctionCuboid",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS"
              ]
            },
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionVirtualMeasurements",
            "LongIdentifier": "\"\"",
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2"
              ]
            },
            "OUT_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          }
        ],
        "GROUP": [
          {
            "GroupName": "Group_Type_All",
            "GroupLongIdentifier": "\"contains all groups with special types\"",
            "ROOT": true,
            "SUB_GROUP": {
              "Identifier": [
                "Group_Type_Scalar",
                "Group_Type_Array",
                "Group_Type_Curve",
                "Group_Type_Map",
                "Group_Type_Cuboid",
                "Group_Type_ASCII"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Scalar",
            "GroupLongIdentifier": "\"Contains all scalar measurements and parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SLONG.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.ULONG.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.FLOAT32.IDENTICAL",
                "ASAM.M.SCALAR.FLOAT64.IDENTICAL",
                "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.SCALAR.SLONG.IDENTICAL",
                "ASAM.M.SCALAR.SWORD.IDENTICAL",
                "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
                "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.ULONG.IDENTICAL",
                "ASAM.M.SCALAR.UWORD.IDENTICAL",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Array",
            "GroupLongIdentifier": "\"Contains all array measurements and parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.MATRIX_DIM_16_1.UBYTE.IDENTICAL",
                "ASAM.M.MATRIX_DIM_16.UBYTE.IDENTICAL",
                "ASAM.M.MATRIX_DIM_8_2.UBYTE.IDENTICAL",
                "ASAM.M.MATRIX_DIM_8_4_2.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Curve",
            "GroupLongIdentifier": "\"Contains all curve parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CURVE.COM_AXIS",
                "ASAM.C.CURVE.CURVE_AXIS",
                "ASAM.C.CURVE.FIX_AXIS.PAR",
                "ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
                "ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
                "ASAM.C.CURVE.RES_AXIS",
                "ASAM.C.CURVE.STD_AXIS",
                "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
                "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
                "ASAM.C.CURVE.STD_AXIS.DISCRETE",
                "ASAM.C.CURVE_AXIS",
                "ASAM.C.AXIS_PTS.RESCALE",
                "ASAM.C.AXIS_PTS.UBYTE_8"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Map",
            "GroupLongIdentifier": "\"Contains all map parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
                "ASAM.C.MAP.STD_AXIS.STD_AXIS"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Cuboid",
            "GroupLongIdentifier": "\"Contains all cuboid parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS"
              ]
            }
          },
          {
            "GroupName": "Group_Type_ASCII",
            "GroupLongIdentifier": "\"Contains all ASCII parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.ASCII.UBYTE.NUMBER_42"
              ]
            }
          },
          {
            "GroupName": "Group_Function_All",
            "GroupLongIdentifier": "\"contains all groups with special functions\"",
            "ROOT": true,
            "SUB_GROUP": {
              "Identifier": [
                "Group_Function_Virtual",
                "Group_Function_Monotony",
                "Group_Function_Computation",
                "Group_Function_Bitmask"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Virtual",
            "GroupLongIdentifier": "\"Contains all functions, measurements and parameters used for virtual\"",
            "FUNCTION_LIST": {
              "Name": [
                "FunctionVirtualMeasurements"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.VIRTUAL.REF_1.SWORD",
                "ASAM.C.VIRTUAL.REF_2.UWORD",
                "ASAM.C.VIRTUAL.REF_3.SWORD",
                "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Monotony",
            "GroupLongIdentifier": "\"Contains all functions, measurements and parameters used for monotony\""
          },
          {
            "GroupName": "Group_Function_Computation",
            "GroupLongIdentifier": "\"Contains all measurements and parameters that have a computation method different to identical\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Bitmask",
            "GroupLongIdentifier": "\"Contains all measurements and parameters that have a bitmask\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            }
          },
          {
            "GroupName": "Group_Transformer",
            "GroupLongIdentifier": "\"Transformers\"",
            "ROOT": true,
            "SUB_GROUP": {
              "Identifier": [
                "TestTransformer",
                "TestTransformerBlob"
              ]
            }
          },
          {
            "GroupName": "TestTransformer",
            "GroupLongIdentifier": "\"Transformer with standard parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3"
              ]
            }
          },
          {
            "GroupName": "TestTransformerBlob",
            "GroupLongIdentifier": "\"Transformer with Blob\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.BLOB.TRANSFORMER_TEST",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
                "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
                "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3"
              ]
            }
          }
        ],
        "IF_DATA": [
          {
            "Name": "XCP",
            "DataParams": [],
            "PROTOCOL_LAYER": {
              "Name": "PROTOCOL_LAYER",
              "DataParams": [
                "0x100",
                "0x20",
                "0x20",
                "0x20",
                "0x20",
                "0x20",
                "0x20",
                "0x20",
                "0x8",
                "0x8",
                "BYTE_ORDER_MSB_LAST",
                "ADDRESS_GRANULARITY_BYTE",
                "OPTIONAL_CMD",
                "SET_REQUEST",
                "OPTIONAL_CMD",
                "GET_SEED",
                "OPTIONAL_CMD",
                "UNLOCK",
                "OPTIONAL_CMD",
                "SET_MTA",
                "OPTIONAL_CMD",
                "SHORT_DOWNLOAD",
                "OPTIONAL_CMD",
                "PROGRAM_START",
                "OPTIONAL_CMD",
                "PROGRAM_CLEAR",
                "OPTIONAL_CMD",
                "PROGRAM",
                "OPTIONAL_CMD",
                "PROGRAM_RESET",
                "OPTIONAL_CMD",
                "GET_PGM_PROCESSOR_INFO",
                "OPTIONAL_CMD",
                "GET_SECTOR_INFO",
                "OPTIONAL_CMD",
                "PROGRAM_PREPARE",
                "OPTIONAL_CMD",
                "PROGRAM_NEXT",
                "OPTIONAL_CMD",
                "PROGRAM_MAX",
                "OPTIONAL_CMD",
                "PROGRAM_VERIFY",
                "OPTIONAL_CMD",
                "TRANSPORT_LAYER_CMD",
                "OPTIONAL_CMD",
                "GET_ID",
                "OPTIONAL_CMD",
                "UPLOAD",
                "OPTIONAL_CMD",
                "SHORT_UPLOAD",
                "OPTIONAL_CMD",
                "BUILD_CHECKSUM",
                "OPTIONAL_CMD",
                "DOWNLOAD_NEXT",
                "OPTIONAL_CMD",
                "SET_CAL_PAGE",
                "OPTIONAL_CMD",
                "GET_CAL_PAGE",
                "OPTIONAL_CMD",
                "CLEAR_DAQ_LIST",
                "OPTIONAL_CMD",
                "SET_DAQ_PTR",
                "OPTIONAL_CMD",
                "WRITE_DAQ",
                "OPTIONAL_CMD",
                "SET_DAQ_LIST_MODE",
                "OPTIONAL_CMD",
                "GET_DAQ_LIST_MODE",
                "OPTIONAL_CMD",
                "START_STOP_DAQ_LIST",
                "OPTIONAL_CMD",
                "FREE_DAQ",
                "OPTIONAL_CMD",
                "ALLOC_DAQ",
                "OPTIONAL_CMD",
                "ALLOC_ODT",
                "OPTIONAL_CMD",
                "ALLOC_ODT_ENTRY",
                "OPTIONAL_CMD",
                "START_STOP_SYNCH",
                "OPTIONAL_CMD",
                "DOWNLOAD",
                "OPTIONAL_CMD",
                "MODIFY_BITS",
                "OPTIONAL_CMD",
                "GET_PAG_PROCESSOR_INFO",
                "OPTIONAL_CMD",
                "GET_SEGMENT_INFO",
                "OPTIONAL_CMD",
                "GET_PAGE_INFO",
                "OPTIONAL_CMD",
                "SET_SEGMENT_MODE",
                "OPTIONAL_CMD",
                "GET_SEGMENT_MODE",
                "OPTIONAL_CMD",
                "COPY_CAL_PAGE",
                "OPTIONAL_CMD",
                "GET_DAQ_CLOCK",
                "OPTIONAL_CMD",
                "READ_DAQ",
                "OPTIONAL_CMD",
                "GET_DAQ_LIST_MODE",
                "OPTIONAL_CMD",
                "DOWNLOAD_MAX",
                "COMMUNICATION_MODE_SUPPORTED",
                "BLOCK",
                "SLAVE",
                "MASTER",
                "0x14",
                "0x5"
              ]
            },
            "DAQ": {
              "Name": "DAQ",
              "DataParams": [
                "STATIC",
                "0x3",
                "0x2",
                "0x0",
                "OPTIMISATION_TYPE_DEFAULT",
                "ADDRESS_EXTENSION_DAQ",
                "IDENTIFICATION_FIELD_TYPE_ABSOLUTE",
                "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE",
                "0x4",
                "OVERLOAD_INDICATION_EVENT",
                "PRESCALER_SUPPORTED"
              ],
              "TIMESTAMP_SUPPORTED": {
                "Name": "TIMESTAMP_SUPPORTED",
                "DataParams": [
                  "0x1",
                  "SIZE_DWORD",
                  "UNIT_1US"
                ]
              },
              "DAQ_LIST": [
                {
                  "Name": "DAQ_LIST",
                  "DataParams": [
                    "0x0",
                    "DAQ_LIST_TYPE",
                    "DAQ",
                    "MAX_ODT",
                    "0x5",
                    "MAX_ODT_ENTRIES",
                    "0x7"
                  ]
                },
                {
                  "Name": "DAQ_LIST",
                  "DataParams": [
                    "0x1",
                    "DAQ_LIST_TYPE",
                    "DAQ",
                    "MAX_ODT",
                    "0x4",
                    "MAX_ODT_ENTRIES",
                    "0x7"
                  ]
                },
                {
                  "Name": "DAQ_LIST",
                  "DataParams": [
                    "0x2",
                    "DAQ_LIST_TYPE",
                    "DAQ",
                    "MAX_ODT",
                    "0x3",
                    "MAX_ODT_ENTRIES",
                    "0x7"
                  ]
                }
              ],
              "EVENT": [
                {
                  "Name": "EVENT",
                  "DataParams": [
                    "\"5ms\"",
                    "\"5ms\"",
                    "0x0",
                    "DAQ",
                    "0xFF",
                    "0x5",
                    "0x6",
                    "0xFF"
                  ]
                },
                {
                  "Name": "EVENT",
                  "DataParams": [
                    "\"extEvent\"",
                    "\"extEvent\"",
                    "0x1",
                    "DAQ",
                    "0xFF",
                    "0x1",
                    "0x9",
                    "0xFF"
                  ]
                }
              ]
            },
            "XCP_ON_CAN": {
              "Name": "XCP_ON_CAN",
              "DataParams": [
                "0x100",
                "CAN_ID_BROADCAST",
                "0x52",
                "CAN_ID_MASTER",
                "0x51",
                "CAN_ID_SLAVE",
                "0x50",
                "BAUDRATE",
                "0x7A120"
              ]
            }
          },
          {
            "Name": "ETK",
            "DataParams": [],
            "SOURCE": [
              {
                "Name": "SOURCE",
                "DataParams": [
                  "\"Engine_1\"",
                  "103",
                  "1",
                  "QP_BLOB",
                  "0x101",
                  "1",
                  "DIRECT",
                  "23",
                  "MEASUREMENT",
                  "2952251460",
                  "1020",
                  "2952232964",
                  "2952243268",
                  "0",
                  "0",
                  "0",
                  "15000",
                  "256",
                  "0"
                ]
              },
              {
                "Name": "SOURCE",
                "DataParams": [
                  "\"Engine_2\"",
                  "103",
                  "1",
                  "QP_BLOB",
                  "0x101",
                  "2",
                  "DIRECT",
                  "21",
                  "MEASUREMENT",
                  "2952251460",
                  "1020",
                  "2952233996",
                  "2952244288",
                  "0",
                  "0",
                  "0",
                  "15000",
                  "256",
                  "0"
                ]
              },
              {
                "Name": "SOURCE",
                "DataParams": [
                  "\"Engine_3\"",
                  "103",
                  "1",
                  "QP_BLOB",
                  "0x101",
                  "3",
                  "DIRECT",
                  "19",
                  "MEASUREMENT",
                  "2952251460",
                  "1020",
                  "2952235028",
                  "2952245308",
                  "0",
                  "0",
                  "0",
                  "15000",
                  "256",
                  "0"
                ]
              },
              {
                "Name": "SOURCE",
                "DataParams": [
                  "\"10ms_sync\"",
                  "4",
                  "1",
                  "QP_BLOB",
                  "0x101",
                  "7",
                  "DIRECT",
                  "11",
                  "MEASUREMENT",
                  "2952251460",
                  "1020",
                  "2952239156",
                  "2952249388",
                  "0",
                  "0",
                  "0",
                  "10000",
                  "512",
                  "0"
                ]
              },
              {
                "Name": "SOURCE",
                "DataParams": [
                  "\"100ms_sync\"",
                  "5",
                  "1",
                  "QP_BLOB",
                  "0x101",
                  "8",
                  "DIRECT",
                  "9",
                  "MEASUREMENT",
                  "2952251460",
                  "1020",
                  "2952241212",
                  "2952250408",
                  "0",
                  "0",
                  "0",
                  "100000",
                  "512",
                  "0"
                ]
              }
            ],
            "TP_BLOB": {
              "Name": "TP_BLOB",
              "DataParams": [
                "0x1000103",
                "INTERFACE_SPEED_100MBIT",
                "0x0",
                "ETK_CFG",
                "0x10",
                "0x1D",
                "0x61",
                "0x1",
                "0x1",
                "0xFF",
                "0xFF",
                "0x63",
                "0xCF",
                "0x7F",
                "0x81",
                "0x84",
                "0x79",
                "0x64",
                "0xB",
                "0x65",
                "0x8C",
                "0x66",
                "0xA0",
                "0x67",
                "0x91",
                "0x68",
                "0x9E",
                "0x78",
                "0x79",
                "0x7C",
                "0xCB",
                "0x73",
                "0xBA",
                "ETK_MAILBOX",
                "0x11223344",
                "EXRAM",
                "0xAFF7FF00",
                "0xFF",
                "EXRAM",
                "0xAFF7FF00",
                "0xFF",
                "PAGE_SWITCH_METHOD",
                "0x1",
                "MAILBOX",
                "0x1",
                "0x1F4",
                "0xAFF7C928",
                "AUTOSTART_BEHAVIOR",
                "ALWAYS_RP",
                "OCT_WORKINGPAGE",
                "0x400",
                "0xAFF7C84C",
                "0xDC"
              ],
              "DISTAB_CFG": {
                "Name": "DISTAB_CFG",
                "DataParams": [
                  "0xD",
                  "0x122",
                  "0x2",
                  "0x0",
                  "0x0",
                  "TRG_MOD",
                  "0x0"
                ]
              }
            }
          }
        ],
        "INSTANCE": [
          {
            "Name": "ASAM_I_SCALAR_VALUE_UWORD_SINGLE",
            "LongIdentifier": "\"single scalar instance\"",
            "TypedefName": "TYPE_VALUE_UWORD_CM.LINEAR.MUL_2",
            "Address": "0x810000",
            "DISPLAY_IDENTIFIER": "DI_ASAM_I_SCALAR_VALUE_UWORD_SINGLE"
          },
          {
            "Name": "ASAM_I_SCALAR_VALUE_UWORD_ARRAY_5",
            "LongIdentifier": "\"array of 5 scalars\"",
            "TypedefName": "TYPE_VALUE_UWORD_CM.LINEAR.MUL_2",
            "Address": "0x810002",
            "DISPLAY_IDENTIFIER": "DI_ASAM_I_SCALAR_VALUE_UWORD_ARRAY_5",
            "MATRIX_DIM": [
              "5"
            ]
          },
          {
            "Name": "ASAM_I_AXIS_PTS_UBYTE_8",
            "LongIdentifier": "\"axis points\"",
            "TypedefName": "TYPE_AXIS_UBYTE_CM.IDENTICAL",
            "Address": "0x810010"
          },
          {
            "Name": "ASAM_I_MAP_COM_AXIS_FIX_AXIS",
            "LongIdentifier": "\"Instance of Map with COM_AXIS and FIX_AXIS\"",
            "TypedefName": "TYPE_MAP_COM_AXIS.FIX_AXIS_CM.LINEAR.MUL_2",
            "Address": "0x810030"
          },
          {
            "Name": "ASAM_S_EXAMPLE",
            "LongIdentifier": "\"Example Instance\"",
            "TypedefName": "T_MyStructure",
            "Address": "0x811000"
          }
        ],
        "MEASUREMENT": [
          {
            "Name": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.IDENTICAL",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.IDENTICAL.STATUS_STRING",
            "LongIdentifier": "\"Scalar measurement with status string\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.LINEAR.IDENT.STATUS_STRING",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "252",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.IDENTICAL.STATUS_STRING",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.RAT_FUNC.IDENT.STATUS_STRING",
            "LongIdentifier": "\"Scalar measurement with status string\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.RAT_FUNC.IDENT.STATUS_STRING",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "252",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.IDENTICAL.STATUS_STRING",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.RAT_FUNC.DIV_10",
            "LongIdentifier": "\"Scalar measurement with status string\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.RAT_FUNC.DIV_10",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "252",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.RAT_FUNC.DIV_10",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "5"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.HYPERBOLIC",
            "LongIdentifier": "\"Scalar measurement with status string\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.RAT_FUNC.HYPERBOLIC",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "252",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.RAT_FUNC.HYPERBOLIC",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_VERB.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "5"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "23"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "101",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_INTP.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "13",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "19"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "13",
            "ECU_ADDRESS": "0x13A00",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.FORM.X_PLUS_4",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "4",
            "UpperLimit": "259",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A00",
                "INTERN",
                "1",
                "RASTER",
                "5"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-128",
            "UpperLimit": "127",
            "ECU_ADDRESS": "0x13A01",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A01",
                "INTERN",
                "1",
                "RASTER",
                "3"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.SBYTE.IDENTICAL.DISCRETE",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-128",
            "UpperLimit": "127",
            "DISCRETE": true,
            "ECU_ADDRESS": "0x13A01",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A01",
                "INTERN",
                "1",
                "RASTER",
                "3"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SBYTE",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-256",
            "UpperLimit": "254",
            "ECU_ADDRESS": "0x13A01",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A01",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "65535",
            "ECU_ADDRESS": "0x13A02",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A02",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.SWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "ECU_ADDRESS": "0x13A04",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A04",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.ULONG.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "ULONG",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "4294967295",
            "ECU_ADDRESS": "0x13A08",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A08",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.SLONG.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SLONG",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-2147483648",
            "UpperLimit": "2147483647",
            "ECU_ADDRESS": "0x13A0C",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A0C",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.FLOAT32.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "FLOAT32_IEEE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-1e24",
            "UpperLimit": "1e24",
            "ECU_ADDRESS": "0x13A10",
            "FORMAT": "\"%8.4\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A10",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.FLOAT32.IDENTICAL.DISCRETE",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "FLOAT32_IEEE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-1e24",
            "UpperLimit": "1e24",
            "DISCRETE": true,
            "ECU_ADDRESS": "0x13A10",
            "FORMAT": "\"%8.4\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A10",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.FLOAT64.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "FLOAT64_IEEE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-1e308",
            "UpperLimit": "1e308",
            "ECU_ADDRESS": "0x13A14",
            "FORMAT": "\"%8.4\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A14",
                "INTERN",
                "1",
                "RASTER",
                "5"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "LongIdentifier": "\"Scalar measurement with Bitmask for a bit-area\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "BIT_MASK": "0x0FF0",
            "ECU_ADDRESS": "0x13A20",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A20",
                "INTERN",
                "1",
                "RASTER",
                "5"
              ]
            }
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
            "LongIdentifier": "\"Scalar measurement with Bitmask for a single bit\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0008",
            "ECU_ADDRESS": "0x13A20",
            "FORMAT": "\"%5.0\"",
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A20",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_16_1.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "16",
              "1"
            ],
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A30",
                "INTERN",
                "1",
                "RASTER",
                "3"
              ]
            }
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_16.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "16"
            ],
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A30",
                "INTERN",
                "1",
                "RASTER",
                "4"
              ]
            }
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_8_2.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "8",
              "2"
            ],
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A30",
                "INTERN",
                "1",
                "RASTER",
                "1"
              ]
            }
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_8_4_2.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "8",
              "4",
              "2"
            ],
            "IF_DATA": {
              "Name": "ETK",
              "DataParams": [
                "KP_BLOB",
                "0x13A30",
                "INTERN",
                "1",
                "RASTER",
                "2"
              ]
            }
          },
          {
            "Name": "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL",
            "LongIdentifier": "\"Virtual measurement with 2 * ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2 as input (based on the phys value of ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2\"",
            "Datatype": "SWORD",
            "CONVERSION": "CM.VIRTUAL.EXTERNAL_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-32768",
            "UpperLimit": "32767",
            "ECU_ADDRESS": "0x0",
            "VIRTUAL": {
              "MeasuringChannel": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2"
              ]
            }
          }
        ],
        "RECORD_LAYOUT": [
          {
            "Name": "RL.FNC.UBYTE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SBYTE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UWORD.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SWORD.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.ULONG.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "ULONG",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SLONG.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SLONG",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT32_IEEE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT64_IEEE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UBYTE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SBYTE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UWORD.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SWORD.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SWORD",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.ULONG.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "ULONG",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SLONG.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SLONG",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT32_IEEE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT32_IEEE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT64_IEEE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT64_IEEE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.AXIS.UBYTE",
            "AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            }
          },
          {
            "Name": "RL.AXIS.UWORD",
            "AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            }
          },
          {
            "Name": "RL.CURVE.SWORD.SBYTE.DECR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CURVE.SWORD.SBYTE.INCR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.AXIS_PTS.SBYTE.DECR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.AXIS_PTS.RES_AXIS",
            "AXIS_RESCALE_X": {
              "Position": "3",
              "Datatype": "UBYTE",
              "MaxNumberOfRescalePairs": "5",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "NO_RESCALE_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "RESERVED": {
              "Position": "2",
              "DataSize": "BYTE"
            }
          },
          {
            "Name": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "AXIS_PTS_X": {
              "Position": "3",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "4",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "5",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBOID.SWORD.SBYTE.DECR",
            "AXIS_PTS_Z": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBOID.ROW_DIR",
            "AXIS_PTS_X": {
              "Position": "4",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "5",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Z": {
              "Position": "6",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "7",
              "Datatype": "SBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "3",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBOID.COLUMN_DIR",
            "AXIS_PTS_X": {
              "Position": "4",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "5",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Z": {
              "Position": "6",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "7",
              "Datatype": "SBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "3",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBE_4.ROW_DIR",
            "AXIS_PTS_X": {
              "Position": "5",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "6",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Z": {
              "Position": "7",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_4": {
              "Position": "8",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "9",
              "Datatype": "SBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "3",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_4": {
              "Position": "4",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBE_4.COLUMN_DIR",
            "AXIS_PTS_X": {
              "Position": "5",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "6",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Z": {
              "Position": "7",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_4": {
              "Position": "8",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "9",
              "Datatype": "SBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "3",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_4": {
              "Position": "4",
              "Datatype": "UBYTE"
            }
          }
        ],
        "TRANSFORMER": [
          {
            "Name": "TestTransformer",
            "VERSION": "\"1.1.0.0\"",
            "Executable32": "\"TransformerTestV171.dll\"",
            "Executable64": "\"\"",
            "Timeout": "2000",
            "Trigger": "ON_USER_REQUEST",
            "InverseTransformer": "TestTransformerReverse",
            "TRANSFORMER_IN_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3"
            ],
            "TRANSFORMER_OUT_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3"
            ]
          },
          {
            "Name": "TestTransformerReverse",
            "VERSION": "\"1.1.0.0\"",
            "Executable32": "\"TransformerTestV171.dll\"",
            "Executable64": "\"\"",
            "Timeout": "1500",
            "Trigger": "ON_CHANGE",
            "InverseTransformer": "TestTransformer",
            "TRANSFORMER_IN_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_OUT_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_OUT_3"
            ],
            "TRANSFORMER_OUT_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_IN_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_IN_3"
            ]
          },
          {
            "Name": "TestTransformerBlob",
            "VERSION": "\"1.1.0.0\"",
            "Executable32": "\"TransformerTestV171.dll\"",
            "Executable64": "\"\"",
            "Timeout": "2000",
            "Trigger": "ON_USER_REQUEST",
            "InverseTransformer": "TestTransformerBlobReverse",
            "TRANSFORMER_IN_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME_REVERSE",
              "ASAM.C.BLOB.TRANSFORMER_TEST"
            ],
            "TRANSFORMER_OUT_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_3",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_4"
            ]
          },
          {
            "Name": "TestTransformerBlobReverse",
            "VERSION": "\"1.1.0.0\"",
            "Executable32": "\"TransformerTestV171.dll\"",
            "Executable64": "\"\"",
            "Timeout": "1500",
            "Trigger": "ON_CHANGE",
            "InverseTransformer": "TestTransformerBlob",
            "TRANSFORMER_IN_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_OUT_WAITTIME_REVERSE",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_1",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_2",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_3",
              "ASAM.C.SCALAR.FLOAT32.IDENTICAL.TRANSFORMER_BLOB_OUT_4"
            ],
            "TRANSFORMER_OUT_OBJECTS": [
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME",
              "ASAM.C.SCALAR.UINT16.IDENTICAL.TRANSFORMER_BLOB_IN_WAITTIME_REVERSE",
              "ASAM.C.BLOB.TRANSFORMER_TEST"
            ]
          }
        ],
        "TYPEDEF_AXIS": {
          "Name": "TYPE_AXIS_UBYTE_CM.IDENTICAL",
          "LongIdentifier": "\"typedef for axis points\"",
          "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
          "RecordLayout": "RL.AXIS.UBYTE",
          "MaxDiff": "100.0",
          "CONVERSION": "CM.IDENTICAL",
          "MaxAxisPoints": "10",
          "LowerLimit": "4",
          "UpperLimit": "210"
        },
        "TYPEDEF_CHARACTERISTIC": [
          {
            "Name": "TYPE_VALUE_UWORD_CM.LINEAR.MUL_2",
            "LongIdentifier": "\"Base type for VALUE with UWORD\"",
            "Type": "VALUE",
            "RecordLayout": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "100.0",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "LowerLimit": "10",
            "UpperLimit": "63000",
            "FORMAT": "\"%5.0\"",
            "PHYS_UNIT": "\"ms\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "5",
              "UpperLimit": "64000"
            }
          },
          {
            "Name": "TYPE_MAP_COM_AXIS.FIX_AXIS_CM.LINEAR.MUL_2",
            "LongIdentifier": "\"Base type for VALUE with UWORD\"",
            "Type": "MAP",
            "RecordLayout": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "100.0",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "LowerLimit": "10",
            "UpperLimit": "63000",
            "FORMAT": "\"%5.0\"",
            "PHYS_UNIT": "\"hPa\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "5",
              "UpperLimit": "64000"
            },
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "0",
                "UpperLimit": "255",
                "AXIS_PTS_REF": "ASAM_I_AXIS_PTS_UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              }
            ]
          },
          {
            "Name": "T_MyParameterType",
            "LongIdentifier": "\"Base type for MyParameterType\"",
            "Type": "VALUE",
            "RecordLayout": "RL.FNC.ULONG.ROW_DIR",
            "MaxDiff": "100.0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "100000",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "429467295"
            }
          },
          {
            "Name": "T_CHAR10",
            "LongIdentifier": "\"Base type for Array of char[10]\"",
            "Type": "ASCII",
            "RecordLayout": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "100.0",
            "CONVERSION": "NO_COMPU_METHOD",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "NUMBER": "10"
          },
          {
            "Name": "T_CHAR30",
            "LongIdentifier": "\"Base type for Array of char[30]\"",
            "Type": "ASCII",
            "RecordLayout": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "100.0",
            "CONVERSION": "NO_COMPU_METHOD",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "NUMBER": "30"
          }
        ],
        "TYPEDEF_STRUCTURE": {
          "Name": "T_MyStructure",
          "LongIdentifier": "\"Structure of C example\"",
          "Size": "84",
          "STRUCTURE_COMPONENT": [
            {
              "Name": "A",
              "TypedefName": "T_MyParameterType",
              "AddressOffset": "0"
            },
            {
              "Name": "Dummy1",
              "TypedefName": "T_CHAR10",
              "AddressOffset": "4"
            },
            {
              "Name": "B",
              "TypedefName": "T_MyParameterType",
              "AddressOffset": "14",
              "MATRIX_DIM": [
                "10"
              ]
            },
            {
              "Name": "Dummy2",
              "TypedefName": "T_CHAR30",
              "AddressOffset": "54"
            }
          ]
        }
      }
    }
  }
}