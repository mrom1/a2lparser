{
  "A2L-File": {
    "ASAP2_VERSION": {
      "VersionNo": "1",
      "UpgradeNo": "61"
    },
    "PROJECT": {
      "Name": "ASAP2_Example",
      "LongIdentifier": "\"\"",
      "HEADER": {
        "Comment": "\"ASAP2 Example File\"",
        "PROJECT_NO": "MCD_P12_08",
        "VERSION": "\"V1.61\""
      },
      "MODULE": {
        "Name": "Example",
        "LongIdentifier": "\"\"",
        "A2ML": "block \"IF_DATA\" taggedunion if_data {\n\n\n/*  ==============================================================================================  */\n/*                                                                                                  */\n/*  ASAM XCP AML                                                                                    */\n/*                                                                                                  */\n/*  ==============================================================================================  */\n\n        \"XCP\" struct {\n          taggedstruct {\n            block \"PROTOCOL_LAYER\" struct {\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uint;\n              uchar;\n              uint;\n              enum {\n                \"BYTE_ORDER_MSB_LAST\" = 0,\n                \"BYTE_ORDER_MSB_FIRST\" = 1\n              };\n              enum {\n                \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                \"ADDRESS_GRANULARITY_WORD\" = 2,\n                \"ADDRESS_GRANULARITY_DWORD\" = 4\n              };\n              taggedstruct {\n                (\"OPTIONAL_CMD\" enum {\n                  \"GET_COMM_MODE_INFO\" = 251,\n                  \"GET_ID\" = 250,\n                  \"SET_REQUEST\" = 249,\n                  \"GET_SEED\" = 248,\n                  \"UNLOCK\" = 247,\n                  \"SET_MTA\" = 246,\n                  \"UPLOAD\" = 245,\n                  \"SHORT_UPLOAD\" = 244,\n                  \"BUILD_CHECKSUM\" = 243,\n                  \"TRANSPORT_LAYER_CMD\" = 242,\n                  \"USER_CMD\" = 241,\n                  \"DOWNLOAD\" = 240,\n                  \"DOWNLOAD_NEXT\" = 239,\n                  \"DOWNLOAD_MAX\" = 238,\n                  \"SHORT_DOWNLOAD\" = 237,\n                  \"MODIFY_BITS\" = 236,\n                  \"SET_CAL_PAGE\" = 235,\n                  \"GET_CAL_PAGE\" = 234,\n                  \"GET_PAG_PROCESSOR_INFO\" = 233,\n                  \"GET_SEGMENT_INFO\" = 232,\n                  \"GET_PAGE_INFO\" = 231,\n                  \"SET_SEGMENT_MODE\" = 230,\n                  \"GET_SEGMENT_MODE\" = 229,\n                  \"COPY_CAL_PAGE\" = 228,\n                  \"CLEAR_DAQ_LIST\" = 227,\n                  \"SET_DAQ_PTR\" = 226,\n                  \"WRITE_DAQ\" = 225,\n                  \"SET_DAQ_LIST_MODE\" = 224,\n                  \"GET_DAQ_LIST_MODE\" = 223,\n                  \"START_STOP_DAQ_LIST\" = 222,\n                  \"START_STOP_SYNCH\" = 221,\n                  \"GET_DAQ_CLOCK\" = 220,\n                  \"READ_DAQ\" = 219,\n                  \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                  \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                  \"GET_DAQ_LIST_INFO\" = 216,\n                  \"GET_DAQ_EVENT_INFO\" = 215,\n                  \"FREE_DAQ\" = 214,\n                  \"ALLOC_DAQ\" = 213,\n                  \"ALLOC_ODT\" = 212,\n                  \"ALLOC_ODT_ENTRY\" = 211,\n                  \"PROGRAM_START\" = 210,\n                  \"PROGRAM_CLEAR\" = 209,\n                  \"PROGRAM\" = 208,\n                  \"PROGRAM_RESET\" = 207,\n                  \"GET_PGM_PROCESSOR_INFO\" = 206,\n                  \"GET_SECTOR_INFO\" = 205,\n                  \"PROGRAM_PREPARE\" = 204,\n                  \"PROGRAM_FORMAT\" = 203,\n                  \"PROGRAM_NEXT\" = 202,\n                  \"PROGRAM_MAX\" = 201,\n                  \"PROGRAM_VERIFY\" = 200\n                })*;\n                \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                  \"BLOCK\" taggedstruct {\n                    \"SLAVE\" ;\n                    \"MASTER\" struct {\n                      uchar;\n                      uchar;\n                    };\n                  };\n                  \"INTERLEAVED\" uchar;\n                };\n                \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n              };\n            };\n            block \"SEGMENT\" struct {\n              uchar;\n              uchar;\n              uchar;\n              uchar;\n              uchar;\n              taggedstruct {\n                block \"CHECKSUM\" struct {\n                  enum {\n                    \"XCP_ADD_11\" = 1,\n                    \"XCP_ADD_12\" = 2,\n                    \"XCP_ADD_14\" = 3,\n                    \"XCP_ADD_22\" = 4,\n                    \"XCP_ADD_24\" = 5,\n                    \"XCP_ADD_44\" = 6,\n                    \"XCP_CRC_16\" = 7,\n                    \"XCP_CRC_16_CITT\" = 8,\n                    \"XCP_CRC_32\" = 9,\n                    \"XCP_USER_DEFINED\" = 255\n                  };\n                  taggedstruct {\n                    \"MAX_BLOCK_SIZE\" ulong;\n                    \"EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                (block \"PAGE\" struct {\n                  uchar;\n                  enum {\n                    \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                    \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                    \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                    \"ECU_ACCESS_DONT_CARE\" = 3\n                  };\n                  enum {\n                    \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                    \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                    \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                    \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                  };\n                  enum {\n                    \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                    \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                    \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                    \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                  };\n                  taggedstruct {\n                    \"INIT_SEGMENT\" uchar;\n                  };\n                })*;\n                (block \"ADDRESS_MAPPING\" struct {\n                  ulong;\n                  ulong;\n                  ulong;\n                })*;\n                \"PGM_VERIFY\" ulong;\n              };\n            };\n            block \"DAQ\" struct {\n              enum {\n                \"STATIC\" = 0,\n                \"DYNAMIC\" = 1\n              };\n              uint;\n              uint;\n              uchar;\n              enum {\n                \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n              };\n              enum {\n                \"ADDRESS_EXTENSION_FREE\" = 0,\n                \"ADDRESS_EXTENSION_ODT\" = 1,\n                \"ADDRESS_EXTENSION_DAQ\" = 3\n              };\n              enum {\n                \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n              };\n              enum {\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n              };\n              uchar;\n              enum {\n                \"NO_OVERLOAD_INDICATION\" = 0,\n                \"OVERLOAD_INDICATION_PID\" = 1,\n                \"OVERLOAD_INDICATION_EVENT\" = 2\n              };\n              taggedstruct {\n                \"PRESCALER_SUPPORTED\" ;\n                \"RESUME_SUPPORTED\" ;\n                block \"STIM\" struct {\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                  };\n                  uchar;\n                  taggedstruct {\n                    \"BIT_STIM_SUPPORTED\" ;\n                  };\n                };\n                block \"TIMESTAMP_SUPPORTED\" struct {\n                  uint;\n                  enum {\n                    \"NO_TIME_STAMP\" = 0,\n                    \"SIZE_BYTE\" = 1,\n                    \"SIZE_WORD\" = 2,\n                    \"SIZE_DWORD\" = 4\n                  };\n                  enum {\n                    \"UNIT_1NS\" = 0,\n                    \"UNIT_10NS\" = 1,\n                    \"UNIT_100NS\" = 2,\n                    \"UNIT_1US\" = 3,\n                    \"UNIT_10US\" = 4,\n                    \"UNIT_100US\" = 5,\n                    \"UNIT_1MS\" = 6,\n                    \"UNIT_10MS\" = 7,\n                    \"UNIT_100MS\" = 8,\n                    \"UNIT_1S\" = 9\n                  };\n                  taggedstruct {\n                    \"TIMESTAMP_FIXED\" ;\n                  };\n                };\n                \"PID_OFF_SUPPORTED\" ;\n                (block \"DAQ_LIST\" struct {\n                  uint;\n                  taggedstruct {\n                    \"DAQ_LIST_TYPE\" enum {\n                      \"DAQ\" = 1,\n                      \"STIM\" = 2,\n                      \"DAQ_STIM\" = 3\n                    };\n                    \"MAX_ODT\" uchar;\n                    \"MAX_ODT_ENTRIES\" uchar;\n                    \"FIRST_PID\" uchar;\n                    \"EVENT_FIXED\" uint;\n                    block \"PREDEFINED\" taggedstruct {\n                      (block \"ODT\" struct {\n                        uchar;\n                        taggedstruct {\n                          (\"ODT_ENTRY\" struct {\n                            uchar;\n                            ulong;\n                            uchar;\n                            uchar;\n                            uchar;\n                          })*;\n                        };\n                      })*;\n                    };\n                  };\n                })*;\n                (block \"EVENT\" struct {\n                  char[101];\n                  char[9];\n                  uint;\n                  enum {\n                    \"DAQ\" = 1,\n                    \"STIM\" = 2,\n                    \"DAQ_STIM\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                })*;\n              };\n            };\n            block \"PAG\" struct {\n              uchar;\n              taggedstruct {\n                \"FREEZE_SUPPORTED\" ;\n              };\n            };\n            block \"PGM\" struct {\n              enum {\n                \"PGM_MODE_ABSOLUTE\" = 1,\n                \"PGM_MODE_FUNCTIONAL\" = 2,\n                \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n              };\n              uchar;\n              uchar;\n              taggedstruct {\n                (block \"SECTOR\" struct {\n                  char[101];\n                  uchar;\n                  ulong;\n                  ulong;\n                  uchar;\n                  uchar;\n                  uchar;\n                })*;\n                \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                  \"BLOCK\" taggedstruct {\n                    \"SLAVE\" ;\n                    \"MASTER\" struct {\n                      uchar;\n                      uchar;\n                    };\n                  };\n                  \"INTERLEAVED\" uchar;\n                };\n              };\n            };\n            block \"DAQ_EVENT\" taggedunion {\n              \"FIXED_EVENT_LIST\" taggedstruct {\n                (\"EVENT\" uint)*;\n              };\n              \"VARIABLE\" taggedstruct {\n                block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                  (\"EVENT\" uint)*;\n                };\n                block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                  (\"EVENT\" uint)*;\n                };\n              };\n            };\n            block \"XCP_ON_CAN\" struct {\n              uint;\n              taggedstruct {\n                \"CAN_ID_BROADCAST\" ulong;\n                \"CAN_ID_MASTER\" ulong;\n                \"CAN_ID_SLAVE\" ulong;\n                \"BAUDRATE\" ulong;\n                \"SAMPLE_POINT\" uchar;\n                \"SAMPLE_RATE\" enum {\n                  \"SINGLE\" = 1,\n                  \"TRIPLE\" = 3\n                };\n                \"BTL_CYCLES\" uchar;\n                \"SJW\" uchar;\n                \"SYNC_EDGE\" enum {\n                  \"SINGLE\" = 1,\n                  \"DUAL\" = 2\n                };\n                \"MAX_DLC_REQUIRED\" ;\n                (block \"DAQ_LIST_CAN_ID\" struct {\n                  uint;\n                  taggedstruct {\n                    \"VARIABLE\" ;\n                    \"FIXED\" ulong;\n                  };\n                })*;\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_SxI\" struct {\n              uint;\n              ulong;\n              taggedstruct {\n                \"ASYNCH_FULL_DUPLEX_MODE\" struct {\n                  enum {\n                    \"PARITY_NONE\" = 0,\n                    \"PARITY_ODD\" = 1,\n                    \"PARITY_EVEN\" = 2\n                  };\n                  enum {\n                    \"ONE_STOP_BIT\" = 1,\n                    \"TWO_STOP_BITS\" = 2\n                  };\n                };\n                \"SYNCH_FULL_DUPLEX_MODE_BYTE\" ;\n                \"SYNCH_FULL_DUPLEX_MODE_WORD\" ;\n                \"SYNCH_FULL_DUPLEX_MODE_DWORD\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_BYTE\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_WORD\" ;\n                \"SYNCH_MASTER_SLAVE_MODE_DWORD\" ;\n              };\n              enum {\n                \"HEADER_LEN_BYTE\" = 0,\n                \"HEADER_LEN_CTR_BYTE\" = 1,\n                \"HEADER_LEN_WORD\" = 2,\n                \"HEADER_LEN_CTR_WORD\" = 3\n              };\n              enum {\n                \"NO_CHECKSUM\" = 0,\n                \"CHECKSUM_BYTE\" = 1,\n                \"CHECKSUM_WORD\" = 2\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_TCP_IP\" struct {\n              uint;\n              uint;\n              taggedunion {\n                \"HOST_NAME\" char[256];\n                \"ADDRESS\" char[15];\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_UDP_IP\" struct {\n              uint;\n              uint;\n              taggedunion {\n                \"HOST_NAME\" char[256];\n                \"ADDRESS\" char[15];\n              };\n              taggedstruct {\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n            block \"XCP_ON_USB\" struct {\n              uint;\n              uint;\n              uint;\n              uchar;\n              enum {\n                \"HEADER_LEN_BYTE\" = 0,\n                \"HEADER_LEN_CTR_BYTE\" = 1,\n                \"HEADER_LEN_FILL_BYTE\" = 2,\n                \"HEADER_LEN_WORD\" = 3,\n                \"HEADER_LEN_CTR_WORD\" = 4,\n                \"HEADER_LEN_FILL_WORD\" = 5\n              };\n              taggedunion {\n                block \"OUT_EP_CMD_STIM\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n              };\n              taggedunion {\n                block \"IN_EP_RESERR_DAQ_EVSERV\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n              };\n              taggedstruct {\n                \"ALTERNATE_SETTING_NO\" uchar;\n                \"INTERFACE_STRING_DESCRIPTOR\" char[101];\n                (block \"OUT_EP_ONLY_STIM\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                })*;\n                (block \"IN_EP_ONLY_DAQ\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                })*;\n                block \"IN_EP_ONLY_EVSERV\" struct {\n                  uchar;\n                  enum {\n                    \"BULK_TRANSFER\" = 2,\n                    \"INTERRUPT_TRANSFER\" = 3\n                  };\n                  uint;\n                  uchar;\n                  enum {\n                    \"MESSAGE_PACKING_SINGLE\" = 0,\n                    \"MESSAGE_PACKING_MULTIPLE\" = 1,\n                    \"MESSAGE_PACKING_STREAMING\" = 2\n                  };\n                  enum {\n                    \"ALIGNMENT_8_BIT\" = 0,\n                    \"ALIGNMENT_16_BIT\" = 1,\n                    \"ALIGNMENT_32_BIT\" = 2,\n                    \"ALIGNMENT_64_BIT\" = 3\n                  };\n                  taggedstruct {\n                    \"RECOMMENDED_HOST_BUFSIZE\" uint;\n                  };\n                };\n                (block \"DAQ_LIST_USB_ENDPOINT\" struct {\n                  uint;\n                  taggedstruct {\n                    \"FIXED_IN\" uchar;\n                    \"FIXED_OUT\" uchar;\n                  };\n                })*;\n                block \"PROTOCOL_LAYER\" struct {\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uint;\n                  uchar;\n                  uint;\n                  enum {\n                    \"BYTE_ORDER_MSB_LAST\" = 0,\n                    \"BYTE_ORDER_MSB_FIRST\" = 1\n                  };\n                  enum {\n                    \"ADDRESS_GRANULARITY_BYTE\" = 1,\n                    \"ADDRESS_GRANULARITY_WORD\" = 2,\n                    \"ADDRESS_GRANULARITY_DWORD\" = 4\n                  };\n                  taggedstruct {\n                    (\"OPTIONAL_CMD\" enum {\n                      \"GET_COMM_MODE_INFO\" = 251,\n                      \"GET_ID\" = 250,\n                      \"SET_REQUEST\" = 249,\n                      \"GET_SEED\" = 248,\n                      \"UNLOCK\" = 247,\n                      \"SET_MTA\" = 246,\n                      \"UPLOAD\" = 245,\n                      \"SHORT_UPLOAD\" = 244,\n                      \"BUILD_CHECKSUM\" = 243,\n                      \"TRANSPORT_LAYER_CMD\" = 242,\n                      \"USER_CMD\" = 241,\n                      \"DOWNLOAD\" = 240,\n                      \"DOWNLOAD_NEXT\" = 239,\n                      \"DOWNLOAD_MAX\" = 238,\n                      \"SHORT_DOWNLOAD\" = 237,\n                      \"MODIFY_BITS\" = 236,\n                      \"SET_CAL_PAGE\" = 235,\n                      \"GET_CAL_PAGE\" = 234,\n                      \"GET_PAG_PROCESSOR_INFO\" = 233,\n                      \"GET_SEGMENT_INFO\" = 232,\n                      \"GET_PAGE_INFO\" = 231,\n                      \"SET_SEGMENT_MODE\" = 230,\n                      \"GET_SEGMENT_MODE\" = 229,\n                      \"COPY_CAL_PAGE\" = 228,\n                      \"CLEAR_DAQ_LIST\" = 227,\n                      \"SET_DAQ_PTR\" = 226,\n                      \"WRITE_DAQ\" = 225,\n                      \"SET_DAQ_LIST_MODE\" = 224,\n                      \"GET_DAQ_LIST_MODE\" = 223,\n                      \"START_STOP_DAQ_LIST\" = 222,\n                      \"START_STOP_SYNCH\" = 221,\n                      \"GET_DAQ_CLOCK\" = 220,\n                      \"READ_DAQ\" = 219,\n                      \"GET_DAQ_PROCESSOR_INFO\" = 218,\n                      \"GET_DAQ_RESOLUTION_INFO\" = 217,\n                      \"GET_DAQ_LIST_INFO\" = 216,\n                      \"GET_DAQ_EVENT_INFO\" = 215,\n                      \"FREE_DAQ\" = 214,\n                      \"ALLOC_DAQ\" = 213,\n                      \"ALLOC_ODT\" = 212,\n                      \"ALLOC_ODT_ENTRY\" = 211,\n                      \"PROGRAM_START\" = 210,\n                      \"PROGRAM_CLEAR\" = 209,\n                      \"PROGRAM\" = 208,\n                      \"PROGRAM_RESET\" = 207,\n                      \"GET_PGM_PROCESSOR_INFO\" = 206,\n                      \"GET_SECTOR_INFO\" = 205,\n                      \"PROGRAM_PREPARE\" = 204,\n                      \"PROGRAM_FORMAT\" = 203,\n                      \"PROGRAM_NEXT\" = 202,\n                      \"PROGRAM_MAX\" = 201,\n                      \"PROGRAM_VERIFY\" = 200\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                    \"SEED_AND_KEY_EXTERNAL_FUNCTION\" char[256];\n                  };\n                };\n                block \"SEGMENT\" struct {\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    block \"CHECKSUM\" struct {\n                      enum {\n                        \"XCP_ADD_11\" = 1,\n                        \"XCP_ADD_12\" = 2,\n                        \"XCP_ADD_14\" = 3,\n                        \"XCP_ADD_22\" = 4,\n                        \"XCP_ADD_24\" = 5,\n                        \"XCP_ADD_44\" = 6,\n                        \"XCP_CRC_16\" = 7,\n                        \"XCP_CRC_16_CITT\" = 8,\n                        \"XCP_CRC_32\" = 9,\n                        \"XCP_USER_DEFINED\" = 255\n                      };\n                      taggedstruct {\n                        \"MAX_BLOCK_SIZE\" ulong;\n                        \"EXTERNAL_FUNCTION\" char[256];\n                      };\n                    };\n                    (block \"PAGE\" struct {\n                      uchar;\n                      enum {\n                        \"ECU_ACCESS_NOT_ALLOWED\" = 0,\n                        \"ECU_ACCESS_WITHOUT_XCP_ONLY\" = 1,\n                        \"ECU_ACCESS_WITH_XCP_ONLY\" = 2,\n                        \"ECU_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_READ_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_READ_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_READ_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_READ_ACCESS_DONT_CARE\" = 3\n                      };\n                      enum {\n                        \"XCP_WRITE_ACCESS_NOT_ALLOWED\" = 0,\n                        \"XCP_WRITE_ACCESS_WITHOUT_ECU_ONLY\" = 1,\n                        \"XCP_WRITE_ACCESS_WITH_ECU_ONLY\" = 2,\n                        \"XCP_WRITE_ACCESS_DONT_CARE\" = 3\n                      };\n                      taggedstruct {\n                        \"INIT_SEGMENT\" uchar;\n                      };\n                    })*;\n                    (block \"ADDRESS_MAPPING\" struct {\n                      ulong;\n                      ulong;\n                      ulong;\n                    })*;\n                    \"PGM_VERIFY\" ulong;\n                  };\n                };\n                block \"DAQ\" struct {\n                  enum {\n                    \"STATIC\" = 0,\n                    \"DYNAMIC\" = 1\n                  };\n                  uint;\n                  uint;\n                  uchar;\n                  enum {\n                    \"OPTIMISATION_TYPE_DEFAULT\" = 0,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_16\" = 1,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_32\" = 2,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_64\" = 3,\n                    \"OPTIMISATION_TYPE_ODT_TYPE_ALIGNMENT\" = 4,\n                    \"OPTIMISATION_TYPE_MAX_ENTRY_SIZE\" = 5\n                  };\n                  enum {\n                    \"ADDRESS_EXTENSION_FREE\" = 0,\n                    \"ADDRESS_EXTENSION_ODT\" = 1,\n                    \"ADDRESS_EXTENSION_DAQ\" = 3\n                  };\n                  enum {\n                    \"IDENTIFICATION_FIELD_TYPE_ABSOLUTE\" = 0,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_BYTE\" = 1,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD\" = 2,\n                    \"IDENTIFICATION_FIELD_TYPE_RELATIVE_WORD_ALIGNED\" = 3\n                  };\n                  enum {\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE\" = 1,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_WORD\" = 2,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DWORD\" = 4,\n                    \"GRANULARITY_ODT_ENTRY_SIZE_DAQ_DLONG\" = 8\n                  };\n                  uchar;\n                  enum {\n                    \"NO_OVERLOAD_INDICATION\" = 0,\n                    \"OVERLOAD_INDICATION_PID\" = 1,\n                    \"OVERLOAD_INDICATION_EVENT\" = 2\n                  };\n                  taggedstruct {\n                    \"PRESCALER_SUPPORTED\" ;\n                    \"RESUME_SUPPORTED\" ;\n                    block \"STIM\" struct {\n                      enum {\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_BYTE\" = 1,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_WORD\" = 2,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DWORD\" = 4,\n                        \"GRANULARITY_ODT_ENTRY_SIZE_STIM_DLONG\" = 8\n                      };\n                      uchar;\n                      taggedstruct {\n                        \"BIT_STIM_SUPPORTED\" ;\n                      };\n                    };\n                    block \"TIMESTAMP_SUPPORTED\" struct {\n                      uint;\n                      enum {\n                        \"NO_TIME_STAMP\" = 0,\n                        \"SIZE_BYTE\" = 1,\n                        \"SIZE_WORD\" = 2,\n                        \"SIZE_DWORD\" = 4\n                      };\n                      enum {\n                        \"UNIT_1NS\" = 0,\n                        \"UNIT_10NS\" = 1,\n                        \"UNIT_100NS\" = 2,\n                        \"UNIT_1US\" = 3,\n                        \"UNIT_10US\" = 4,\n                        \"UNIT_100US\" = 5,\n                        \"UNIT_1MS\" = 6,\n                        \"UNIT_10MS\" = 7,\n                        \"UNIT_100MS\" = 8,\n                        \"UNIT_1S\" = 9\n                      };\n                      taggedstruct {\n                        \"TIMESTAMP_FIXED\" ;\n                      };\n                    };\n                    \"PID_OFF_SUPPORTED\" ;\n                    (block \"DAQ_LIST\" struct {\n                      uint;\n                      taggedstruct {\n                        \"DAQ_LIST_TYPE\" enum {\n                          \"DAQ\" = 1,\n                          \"STIM\" = 2,\n                          \"DAQ_STIM\" = 3\n                        };\n                        \"MAX_ODT\" uchar;\n                        \"MAX_ODT_ENTRIES\" uchar;\n                        \"FIRST_PID\" uchar;\n                        \"EVENT_FIXED\" uint;\n                        block \"PREDEFINED\" taggedstruct {\n                          (block \"ODT\" struct {\n                            uchar;\n                            taggedstruct {\n                              (\"ODT_ENTRY\" struct {\n                                uchar;\n                                ulong;\n                                uchar;\n                                uchar;\n                                uchar;\n                              })*;\n                            };\n                          })*;\n                        };\n                      };\n                    })*;\n                    (block \"EVENT\" struct {\n                      char[101];\n                      char[9];\n                      uint;\n                      enum {\n                        \"DAQ\" = 1,\n                        \"STIM\" = 2,\n                        \"DAQ_STIM\" = 3\n                      };\n                      uchar;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                  };\n                };\n                block \"PAG\" struct {\n                  uchar;\n                  taggedstruct {\n                    \"FREEZE_SUPPORTED\" ;\n                  };\n                };\n                block \"PGM\" struct {\n                  enum {\n                    \"PGM_MODE_ABSOLUTE\" = 1,\n                    \"PGM_MODE_FUNCTIONAL\" = 2,\n                    \"PGM_MODE_ABSOLUTE_AND_FUNCTIONAL\" = 3\n                  };\n                  uchar;\n                  uchar;\n                  taggedstruct {\n                    (block \"SECTOR\" struct {\n                      char[101];\n                      uchar;\n                      ulong;\n                      ulong;\n                      uchar;\n                      uchar;\n                      uchar;\n                    })*;\n                    \"COMMUNICATION_MODE_SUPPORTED\" taggedunion {\n                      \"BLOCK\" taggedstruct {\n                        \"SLAVE\" ;\n                        \"MASTER\" struct {\n                          uchar;\n                          uchar;\n                        };\n                      };\n                      \"INTERLEAVED\" uchar;\n                    };\n                  };\n                };\n                block \"DAQ_EVENT\" taggedunion {\n                  \"FIXED_EVENT_LIST\" taggedstruct {\n                    (\"EVENT\" uint)*;\n                  };\n                  \"VARIABLE\" taggedstruct {\n                    block \"AVAILABLE_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                    block \"DEFAULT_EVENT_LIST\" taggedstruct {\n                      (\"EVENT\" uint)*;\n                    };\n                  };\n                };\n              };\n            };\n          };\n        };\n\n\n      };",
        "MOD_COMMON": {
          "Comment": "\"\"",
          "ALIGNMENT_BYTE": "1",
          "ALIGNMENT_FLOAT32_IEEE": "4",
          "ALIGNMENT_FLOAT64_IEEE": "4",
          "ALIGNMENT_LONG": "4",
          "ALIGNMENT_WORD": "2",
          "BYTE_ORDER": "MSB_LAST",
          "DEPOSIT": "ABSOLUTE"
        },
        "MOD_PAR": {
          "Comment": "\"\"",
          "NO_OF_INTERFACES": "1",
          "MEMORY_SEGMENT": [
            {
              "Name": "ECU_Code",
              "LongIdentifier": "\"Memory segment for code part of the ECU\"",
              "PrgType": "DATA",
              "MemoryType": "FLASH",
              "Attribute": "EXTERN",
              "Address": "0x16000",
              "Size": "0x86C",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ],
              "IF_DATA": {
                "Name": "XCP",
                "DataParams": [],
                "SEGMENT": {
                  "Name": "SEGMENT",
                  "DataParams": [
                    "0x0",
                    "0x2",
                    "0x0",
                    "0x0",
                    "0x0"
                  ],
                  "PAGE": [
                    {
                      "Name": "PAGE",
                      "DataParams": [
                        "0x0",
                        "ECU_ACCESS_DONT_CARE",
                        "XCP_READ_ACCESS_WITH_ECU_ONLY",
                        "XCP_WRITE_ACCESS_NOT_ALLOWED"
                      ]
                    },
                    {
                      "Name": "PAGE",
                      "DataParams": [
                        "0x1",
                        "ECU_ACCESS_DONT_CARE",
                        "XCP_READ_ACCESS_WITH_ECU_ONLY",
                        "XCP_WRITE_ACCESS_WITH_ECU_ONLY"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "Name": "ECU_Data",
              "LongIdentifier": "\"Memory segment for parameters\"",
              "PrgType": "DATA",
              "MemoryType": "FLASH",
              "Attribute": "EXTERN",
              "Address": "0x810000",
              "Size": "0x10000",
              "Offset": [
                "-1",
                "-1",
                "-1",
                "-1",
                "-1"
              ]
            }
          ],
          "SYSTEM_CONSTANT": [
            {
              "Name": "\"System_Constant_1\"",
              "VALUE": "\"-3.45\""
            },
            {
              "Name": "\"System_Constant_2\"",
              "VALUE": "\"5.67\""
            },
            {
              "Name": "\"System_Constant_3\"",
              "VALUE": "\"Text in System Constant\""
            }
          ]
        },
        "AXIS_PTS": [
          {
            "Name": "ASAM.C.AXIS_PTS.UBYTE_8",
            "LongIdentifier": "\"Common axis for \"",
            "Address": "0x810340",
            "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
            "Deposit_Ref": "RL.AXIS_PTS.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "MaxAxisPoints": "8",
            "LowerLimit": "-128",
            "UpperLimit": "127",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.AXIS_PTS.UBYTE_8"
          },
          {
            "Name": "ASAM.C.AXIS_PTS.RESCALE",
            "LongIdentifier": "\"Rescale Axis\"",
            "Address": "0x8103B0",
            "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
            "Deposit_Ref": "RL.AXIS_PTS.RES_AXIS",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "MaxAxisPoints": "5",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI_0x83BA20.VTAB.RE_AXIS.X_RE_AXIS_xU8"
          }
        ],
        "CHARACTERISTIC": [
          {
            "Name": "ASAM.C.SCALAR.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar FW U16 and CDF20 as name\"",
            "Type": "VALUE",
            "Address": "0x810000",
            "Deposit_Ref": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "10",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UBYTE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "256"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar SBYTE\"",
            "Type": "VALUE",
            "Address": "0x810001",
            "Deposit_Ref": "RL.FNC.SBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100",
            "UpperLimit": "100",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SBYTE.IDENTICAL",
            "FORMAT": "\"%6.1\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "65535",
            "BIT_MASK": "0xFFFF",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            },
            "ANNOTATION": {
              "ANNOTATION_LABEL": "\"ASAM Workinggroup\"",
              "ANNOTATION_ORIGIN": "\"\"",
              "ANNOTATION_TEXT": [
                "\"Test the A2L annotation\""
              ]
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "BIT_MASK": "0x0FF0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0001",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
            "LongIdentifier": "\"Scalar UWORD\"",
            "Type": "VALUE",
            "Address": "0x810002",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0010",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
            "FORMAT": "\"%5.0\"",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "65535"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.RAT_FUNC.DIV_10",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.FORM.X_PLUS_4",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_INTP.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_VERB.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
            "LongIdentifier": "\"Scalar SWORD\"",
            "Type": "VALUE",
            "Address": "0x810004",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.RAT_FUNC.DIV_81_9175",
            "LowerLimit": "-10000",
            "UpperLimit": "20000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SWORD",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-32268",
              "UpperLimit": "32267"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.ULONG.IDENTICAL",
            "LongIdentifier": "\"Scalar ULONG\"",
            "Type": "VALUE",
            "Address": "0x810008",
            "Deposit_Ref": "RL.FNC.ULONG.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-1000000",
            "UpperLimit": "2000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.ULONG.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000000",
              "UpperLimit": "20000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.SLONG.IDENTICAL",
            "LongIdentifier": "\"Scalar SLONG\"",
            "Type": "VALUE",
            "Address": "0x81000C",
            "Deposit_Ref": "RL.FNC.SLONG.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-1000000",
            "UpperLimit": "2000000",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.SLONG.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000000",
              "UpperLimit": "20000000"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
            "LongIdentifier": "\"Scalar FLOAT32_IEEE\"",
            "Type": "VALUE",
            "Address": "0x810010",
            "Deposit_Ref": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "10",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "0",
              "UpperLimit": "256"
            }
          },
          {
            "Name": "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
            "LongIdentifier": "\"Scalar FLOAT64_IEEE\"",
            "Type": "VALUE",
            "Address": "0x810010",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-100",
            "UpperLimit": "200",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
            "EXTENDED_LIMITS": {
              "LowerLimit": "-10000.0",
              "UpperLimit": "20000.0"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
            "LongIdentifier": "\"Array 3x4 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810100",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4",
              "1"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
            "LongIdentifier": "\"Array 3x4 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810120",
            "Deposit_Ref": "RL.FNC.SWORD.COLUMN_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "3",
              "4",
              "1"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR",
            "LongIdentifier": "\"Array 6 of SWORD\"",
            "Type": "VAL_BLK",
            "Address": "0x810140",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-400",
            "UpperLimit": "400",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR",
            "FORMAT": "\"%8.4\"",
            "MATRIX_DIM": [
              "6",
              "1",
              "1"
            ],
            "EXTENDED_LIMITS": {
              "LowerLimit": "-1000",
              "UpperLimit": "1000"
            }
          },
          {
            "Name": "ASAM.C.ASCII.UBYTE.NUMBER_42",
            "LongIdentifier": "\"ASCII string\"",
            "Type": "ASCII",
            "Address": "0x810200",
            "Deposit_Ref": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.ASCII.UBYTE.NUMBER_42",
            "NUMBER": "42"
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810300",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.CURVE.COM_AXIS",
            "LongIdentifier": "\"Curve with common axis\"",
            "Type": "CURVE",
            "Address": "0x810320",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.COM_AXIS",
            "AXIS_DESCR": {
              "Attribute": "COM_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR_DIST\"",
            "Type": "CURVE",
            "Address": "0x810350",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_DIST": {
                "Offset": "1",
                "Distance": "1",
                "Numberapo": "6"
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR\"",
            "Type": "CURVE",
            "Address": "0x810360",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_DIST": {
                "Offset": "0",
                "Distance": "4",
                "Numberapo": "6"
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
            "LongIdentifier": "\"Curve with fix axis and FIX_AXIS_PAR_LIST\"",
            "Type": "CURVE",
            "Address": "0x810370",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
            "AXIS_DESCR": {
              "Attribute": "FIX_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "6",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "FIX_AXIS_PAR_LIST": {
                "AxisPts_Value": [
                  "-1",
                  "4",
                  "6",
                  "8",
                  "9",
                  "10"
                ]
              }
            }
          },
          {
            "Name": "ASAM.C.CURVE.CURVE_AXIS",
            "LongIdentifier": "\"Curve with curve axis\"",
            "Type": "CURVE",
            "Address": "0x810380",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.COM_AXIS",
            "AXIS_DESCR": {
              "Attribute": "CURVE_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "NO_COMPU_METHOD",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "CURVE_AXIS_REF": "ASAM.C.CURVE_AXIS"
            }
          },
          {
            "Name": "ASAM.C.CURVE_AXIS",
            "LongIdentifier": "\"Curve used as axis\"",
            "Type": "CURVE",
            "Address": "0x810390",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE_AXIS",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127"
            }
          },
          {
            "Name": "ASAM.C.CURVE.RES_AXIS",
            "LongIdentifier": "\"Curve with rescale axis\"",
            "Type": "CURVE",
            "Address": "0x8103A0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.RES_AXIS",
            "AXIS_DESCR": {
              "Attribute": "RES_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "9",
              "LowerLimit": "0",
              "UpperLimit": "255",
              "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.RESCALE"
            }
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810800",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "MONOTONY": "STRICT_INCREASE"
            }
          },
          {
            "Name": "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
            "LongIdentifier": "\"Curve with standard axis\"",
            "Type": "CURVE",
            "Address": "0x810820",
            "Deposit_Ref": "RL.CURVE.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
            "FORMAT": "\"%8.3\"",
            "AXIS_DESCR": {
              "Attribute": "STD_AXIS",
              "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
              "CONVERSION": "CM.IDENTICAL",
              "MaxAxisPoints": "8",
              "LowerLimit": "-128",
              "UpperLimit": "127",
              "MONOTONY": "STRICT_DECREASE"
            }
          },
          {
            "Name": "ASAM.C.MAP.STD_AXIS.STD_AXIS",
            "LongIdentifier": "\"Map with 2x standard axis\"",
            "Type": "MAP",
            "Address": "0x810400",
            "Deposit_Ref": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.STD_AXIS.STD_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
                "MaxAxisPoints": "5",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
            "LongIdentifier": "\"Map with 2x standard axis\"",
            "Type": "MAP",
            "Address": "0x810440",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.MAP.COM_AXIS.FIX_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              }
            ]
          },
          {
            "Name": "ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS",
            "LongIdentifier": "\"Map with 2x standard axis\"",
            "Type": "CUBOID",
            "Address": "0x810470",
            "Deposit_Ref": "RL.CUBOID.SWORD.SBYTE.DECR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS",
            "AXIS_DESCR": [
              {
                "Attribute": "COM_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "8",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "AXIS_PTS_REF": "ASAM.C.AXIS_PTS.UBYTE_8"
              },
              {
                "Attribute": "FIX_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "3",
                "LowerLimit": "-128",
                "UpperLimit": "127",
                "FIX_AXIS_PAR_DIST": {
                  "Offset": "1",
                  "Distance": "1",
                  "Numberapo": "3"
                }
              },
              {
                "Attribute": "STD_AXIS",
                "InputQuantity": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "CONVERSION": "CM.IDENTICAL",
                "MaxAxisPoints": "4",
                "LowerLimit": "-128",
                "UpperLimit": "127"
              }
            ]
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_1.SWORD",
            "LongIdentifier": "\"Dependent SWORD\"",
            "Type": "VALUE",
            "Address": "0x810600",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_1.SWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 5\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_2.UWORD",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x810602",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "65535.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_2.UWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 25\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_3.SWORD",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x810604",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_3.SWORD",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.DEPENDENT.REF_1.SWORD",
                "ASAM.C.DEPENDENT.REF_2.UWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_4.FLOAT64_IEEE",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x810610",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_4.FLOAT64_IEEE",
            "FORMAT": "\"%8.2\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 + sysc(System_Constant_1)\"",
              "CHARACTERISTIC": [
                "ASAM.C.DEPENDENT.REF_1.SWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.DEPENDENT.REF_5.FLOAT64_IEEE",
            "LongIdentifier": "\"Dependent UWORD\"",
            "Type": "VALUE",
            "Address": "0x810608",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "-10000.0",
            "UpperLimit": "10000.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.DEPENDENT.REF_5.FLOAT64_IEEE",
            "FORMAT": "\"%8.2\"",
            "DEPENDENT_CHARACTERISTIC": {
              "FORMULA": "\"X1 * 2\"",
              "CHARACTERISTIC": [
                "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_1.SWORD",
            "LongIdentifier": "\"Virtual SWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_1.SWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 - 9\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_2.UWORD",
            "LongIdentifier": "\"Virtual UWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.UWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_2.UWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + 19\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.REF_3.SWORD",
            "LongIdentifier": "\"Virtual UWORD\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.SWORD.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.REF_3.SWORD",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + X2\"",
              "CHARACTERISTIC": [
                "ASAM.C.VIRTUAL.REF_1.SWORD",
                "ASAM.C.VIRTUAL.REF_2.UWORD"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1",
            "LongIdentifier": "\"Virtual value including a system constant in the calculation formula\"",
            "Type": "VALUE",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1",
            "FORMAT": "\"%8.2\"",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"X1 + sysc(System_Constant_1)\"",
              "CHARACTERISTIC": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "ASAM.C.VIRTUAL.ASCII",
            "LongIdentifier": "\"Virtual ASCII string\"",
            "Type": "ASCII",
            "Address": "0x0",
            "Deposit_Ref": "RL.FNC.UBYTE.ROW_DIR",
            "MaxDiff": "0",
            "CONVERSION": "CM.IDENTICAL",
            "LowerLimit": "0.0",
            "UpperLimit": "255.0",
            "DISPLAY_IDENTIFIER": "DI.ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1",
            "NUMBER": "100",
            "VIRTUAL_CHARACTERISTIC": {
              "FORMULA": "\"sysc(System_Constant_3)\""
            }
          }
        ],
        "COMPU_METHOD": [
          {
            "Name": "CM.IDENTICAL",
            "LongIdentifier": "\"conversion that delivers always phys = int\"",
            "ConversionType": "IDENTICAL",
            "FORMAT": "\"%3.0\"",
            "UNIT": "\"hours\""
          },
          {
            "Name": "CM.LINEAR.IDENT",
            "LongIdentifier": "\"Linear function with parameter set for phys = f(int) = 1*int + 0\"",
            "ConversionType": "LINEAR",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS_LINEAR": {
              "a": "1",
              "b": "0"
            }
          },
          {
            "Name": "CM.LINEAR.MUL_2",
            "LongIdentifier": "\"Linear function with parameter set for phys = f(int) = 2*int + 0\"",
            "ConversionType": "LINEAR",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS_LINEAR": {
              "a": "2",
              "b": "0"
            }
          },
          {
            "Name": "CM.RAT_FUNC.IDENT",
            "LongIdentifier": "\"rational function with parameter set for int = f(phys) = phys\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"m/s\"",
            "COEFFS": {
              "a": "0",
              "b": "1",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.RAT_FUNC.DIV_10",
            "LongIdentifier": "\"rational function with parameter set for impl = f(phys) = phys * 10\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%3.1\"",
            "UNIT": "\"km/h\"",
            "COEFFS": {
              "a": "0",
              "b": "10",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.RAT_FUNC.DIV_81_9175",
            "LongIdentifier": "\"rational function with parameter set for impl = f(phys) = phys * 81.9175\"",
            "ConversionType": "RAT_FUNC",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"grad C\"",
            "COEFFS": {
              "a": "0",
              "b": "81.9175",
              "c": "0",
              "d": "0",
              "e": "0",
              "f": "1"
            }
          },
          {
            "Name": "CM.FORM.X_PLUS_4",
            "LongIdentifier": "\"\"",
            "ConversionType": "FORM",
            "FORMAT": "\"%6.1\"",
            "UNIT": "\"rpm\"",
            "FORMULA": {
              "f_x": "\"X1+4\"",
              "FORMULA_INV": {
                "g_x": "\"X1-4\""
              }
            }
          },
          {
            "Name": "CM.VIRTUAL.EXTERNAL_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "FORM",
            "FORMAT": "\"%6.1\"",
            "UNIT": "\"rpm\"",
            "FORMULA": {
              "f_x": "\"4*X1\""
            }
          },
          {
            "Name": "CM.TAB_INTP.DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_INTP.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_INTP.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_NOINTP.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "FORMAT": "\"%8.4\"",
            "UNIT": "\"U/  min  \"",
            "COMPU_TAB_REF": "CM.TAB_NOINTP.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_VERB.DEFAULT_VALUE",
            "LongIdentifier": "\"Verbal conversion with default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%12.0\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.TAB_VERB.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Verbal conversion without default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%12.0\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.TAB_VERB.NO_DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "LongIdentifier": "\"verbal range with default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%4.2\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.VTAB_RANGE.DEFAULT_VALUE.REF"
          },
          {
            "Name": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "LongIdentifier": "\"verbal range without default value\"",
            "ConversionType": "TAB_VERB",
            "FORMAT": "\"%4.2\"",
            "UNIT": "\"\"",
            "COMPU_TAB_REF": "CM.VTAB_RANGE.NO_DEFAULT_VALUE.REF"
          }
        ],
        "COMPU_TAB": [
          {
            "Name": "CM.TAB_INTP.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ],
            "DEFAULT_VALUE_NUMERIC": "300.56"
          },
          {
            "Name": "CM.TAB_INTP.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_INTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ]
          },
          {
            "Name": "CM.TAB_NOINTP.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ],
            "DEFAULT_VALUE_NUMERIC": "300.56"
          },
          {
            "Name": "CM.TAB_NOINTP.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "ConversionType": "TAB_NOINTP",
            "NumberValuePairs": "12",
            "Axis_Points": [
              [
                "-3",
                "98"
              ],
              [
                "-1",
                "99"
              ],
              [
                "0",
                "100"
              ],
              [
                "2",
                "102"
              ],
              [
                "4",
                "104"
              ],
              [
                "5",
                "105"
              ],
              [
                "6",
                "106"
              ],
              [
                "7",
                "107"
              ],
              [
                "8",
                "108"
              ],
              [
                "9",
                "109"
              ],
              [
                "10",
                "110"
              ],
              [
                "13",
                "111"
              ]
            ]
          }
        ],
        "COMPU_VTAB": [
          {
            "Name": "CM.TAB_VERB.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"List of text strings and relation to impl value\"",
            "ConversionType": "TAB_VERB",
            "NumberValuePairs": "3",
            "InVal_OutVal": [
              [
                "1",
                "\"SawTooth\""
              ],
              [
                "2",
                "\"Square\""
              ],
              [
                "3",
                "\"Sinus\""
              ]
            ],
            "DEFAULT_VALUE": "\"unknown signal type\""
          },
          {
            "Name": "CM.TAB_VERB.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"List of text strings and relation to impl value\"",
            "ConversionType": "TAB_VERB",
            "NumberValuePairs": "6",
            "InVal_OutVal": [
              [
                "2",
                "\"red\""
              ],
              [
                "3",
                "\"orange\""
              ],
              [
                "4",
                "\"yellow\""
              ],
              [
                "5",
                "\"green\""
              ],
              [
                "6",
                "\"blue\""
              ],
              [
                "7",
                "\"violet\""
              ]
            ]
          }
        ],
        "COMPU_VTAB_RANGE": [
          {
            "Name": "CM.VTAB_RANGE.DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "NumberValueTriples": "11",
            "InVal_MinMax_OutVal": [
              [
                "0",
                "1",
                "\"Zero_to_one\""
              ],
              [
                "2",
                "3",
                "\"two_to_three\""
              ],
              [
                "4",
                "7",
                "\"four_to_seven\""
              ],
              [
                "14",
                "17",
                "\"fourteen_to_seventeen\""
              ],
              [
                "18",
                "99",
                "\"eigteen_to_ninetynine\""
              ],
              [
                "100",
                "100",
                "\"hundred\""
              ],
              [
                "101",
                "101",
                "\"hundredone\""
              ],
              [
                "102",
                "102",
                "\"hundredtwo\""
              ],
              [
                "103",
                "103",
                "\"hundredthree\""
              ],
              [
                "104",
                "104",
                "\"hundredfour\""
              ],
              [
                "105",
                "105",
                "\"hundredfive\""
              ]
            ],
            "DEFAULT_VALUE": "\"out of range value\""
          },
          {
            "Name": "CM.VTAB_RANGE.NO_DEFAULT_VALUE.REF",
            "LongIdentifier": "\"\"",
            "NumberValueTriples": "11",
            "InVal_MinMax_OutVal": [
              [
                "0",
                "1",
                "\"Zero_to_one\""
              ],
              [
                "2",
                "3",
                "\"two_to_three\""
              ],
              [
                "4",
                "7",
                "\"four_to_seven\""
              ],
              [
                "14",
                "17",
                "\"fourteen_to_seventeen\""
              ],
              [
                "18",
                "99",
                "\"eigteen_to_ninetynine\""
              ],
              [
                "100",
                "100",
                "\"hundred\""
              ],
              [
                "101",
                "101",
                "\"hundredone\""
              ],
              [
                "102",
                "102",
                "\"hundredtwo\""
              ],
              [
                "103",
                "103",
                "\"hundredthree\""
              ],
              [
                "104",
                "104",
                "\"hundredfour\""
              ],
              [
                "105",
                "105",
                "\"hundredfive\""
              ]
            ]
          }
        ],
        "FUNCTION": [
          {
            "Name": "FunctionScalar",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SLONG.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.ULONG.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "SUB_FUNCTION": {
              "Identifier": [
                "FunctionDependentParameters"
              ]
            }
          },
          {
            "Name": "FunctionDependentParameters",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.DEPENDENT.REF_1.SWORD",
                "ASAM.C.DEPENDENT.REF_2.UWORD",
                "ASAM.C.DEPENDENT.REF_3.SWORD"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionCurveAxis",
            "LongIdentifier": "\"\"",
            "DEF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CURVE_AXIS",
                "ASAM.C.CURVE.CURVE_AXIS"
              ]
            },
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.IDENTICAL"
              ]
            }
          },
          {
            "Name": "FunctionVirtualMeasurements",
            "LongIdentifier": "\"\"",
            "IN_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2"
              ]
            },
            "OUT_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          }
        ],
        "GROUP": [
          {
            "GroupName": "Group_Type_All",
            "GroupLongIdentifier": "\"contains all groups with special types\"",
            "ROOT": true,
            "SUB_GROUP": {
              "Identifier": [
                "Group_Type_Scalar",
                "Group_Type_Array",
                "Group_Type_Curve",
                "Group_Type_Map",
                "Group_Type_Cuboid",
                "Group_Type_ASCII"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Scalar",
            "GroupLongIdentifier": "\"Contains all scalar measurements and parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.FLOAT32_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.FLOAT64_IEEE.IDENTICAL",
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.SLONG.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.IDENTICAL",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.SCALAR.ULONG.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.FLOAT32.IDENTICAL",
                "ASAM.M.SCALAR.FLOAT64.IDENTICAL",
                "ASAM.M.SCALAR.SBYTE.IDENTICAL",
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.SCALAR.SLONG.IDENTICAL",
                "ASAM.M.SCALAR.SWORD.IDENTICAL",
                "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
                "ASAM.M.SCALAR.UBYTE.IDENTICAL",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.ULONG.IDENTICAL",
                "ASAM.M.SCALAR.UWORD.IDENTICAL",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Array",
            "GroupLongIdentifier": "\"Contains all array measurements and parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.COLUMN_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_3_4.ROW_DIR",
                "ASAM.C.ARRAY.SWORD.MATRIX_DIM_6.ROW_DIR"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.ARRAY_SIZE_16.UBYTE.IDENTICAL",
                "ASAM.M.MATRIX_DIM_16_1_1.UBYTE.IDENTICAL",
                "ASAM.M.MATRIX_DIM_8_2_1.UBYTE.IDENTICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Curve",
            "GroupLongIdentifier": "\"Contains all curve parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CURVE.COM_AXIS",
                "ASAM.C.CURVE.CURVE_AXIS",
                "ASAM.C.CURVE.FIX_AXIS.PAR",
                "ASAM.C.CURVE.FIX_AXIS.PAR_DIST",
                "ASAM.C.CURVE.FIX_AXIS.PAR_LIST",
                "ASAM.C.CURVE.RES_AXIS",
                "ASAM.C.CURVE.STD_AXIS",
                "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_DECREASE",
                "ASAM.C.CURVE.STD_AXIS.MONOTONY_STRICT_INCREASE",
                "ASAM.C.CURVE_AXIS",
                "ASAM.C.AXIS_PTS.RESCALE",
                "ASAM.C.AXIS_PTS.UBYTE_8"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Map",
            "GroupLongIdentifier": "\"Contains all map parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.MAP.COM_AXIS.FIX_AXIS",
                "ASAM.C.MAP.STD_AXIS.STD_AXIS"
              ]
            }
          },
          {
            "GroupName": "Group_Type_Cuboid",
            "GroupLongIdentifier": "\"Contains all cuboid parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.CUBOID.COM_AXIS.FIX_AXIS.STD_AXIS"
              ]
            }
          },
          {
            "GroupName": "Group_Type_ASCII",
            "GroupLongIdentifier": "\"Contains all ASCII parameters\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.ASCII.UBYTE.NUMBER_42"
              ]
            }
          },
          {
            "GroupName": "Group_Function_All",
            "GroupLongIdentifier": "\"contains all groups with special functions\"",
            "ROOT": true,
            "SUB_GROUP": {
              "Identifier": [
                "Group_Function_Virtual",
                "Group_Function_Monotony",
                "Group_Function_Computation",
                "Group_Function_Bitmask"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Virtual",
            "GroupLongIdentifier": "\"Contains all functions, measurements and parameters used for virtual\"",
            "FUNCTION_LIST": {
              "Name": [
                "FunctionVirtualMeasurements"
              ]
            },
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SBYTE.IDENTICAL",
                "ASAM.C.SCALAR.UBYTE.IDENTICAL",
                "ASAM.C.VIRTUAL.ASCII",
                "ASAM.C.VIRTUAL.REF_1.SWORD",
                "ASAM.C.VIRTUAL.REF_2.UWORD",
                "ASAM.C.VIRTUAL.REF_3.SWORD",
                "ASAM.C.VIRTUAL.SYSTEM_CONSTANT_1"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Monotony",
            "GroupLongIdentifier": "\"Contains all functions, measurements and parameters used for monotony\""
          },
          {
            "GroupName": "Group_Function_Computation",
            "GroupLongIdentifier": "\"Contains all measurements and parameters that have a computation method different to identical\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.SWORD.FORM_X_PLUS_4",
                "ASAM.C.SCALAR.SWORD.LINEAR_MUL_2",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_10",
                "ASAM.C.SCALAR.SWORD.RAT_FUNC_DIV_81_9175",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.C.SCALAR.SWORD.VTAB_RANGE_NO_DEFAULT_VALUE",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
                "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
                "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE"
              ]
            }
          },
          {
            "GroupName": "Group_Function_Bitmask",
            "GroupLongIdentifier": "\"Contains all measurements and parameters that have a bitmask\"",
            "REF_CHARACTERISTIC": {
              "Identifier": [
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0001",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0010",
                "ASAM.C.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            },
            "REF_MEASUREMENT": {
              "Identifier": [
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
                "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0"
              ]
            }
          }
        ],
        "IF_DATA": {
          "Name": "XCP",
          "DataParams": [],
          "PROTOCOL_LAYER": {
            "Name": "PROTOCOL_LAYER",
            "DataParams": [
              "0x100",
              "0x20",
              "0x20",
              "0x20",
              "0x20",
              "0x20",
              "0x20",
              "0x20",
              "0x8",
              "0x8",
              "BYTE_ORDER_MSB_LAST",
              "ADDRESS_GRANULARITY_BYTE",
              "OPTIONAL_CMD",
              "SET_REQUEST",
              "OPTIONAL_CMD",
              "GET_SEED",
              "OPTIONAL_CMD",
              "UNLOCK",
              "OPTIONAL_CMD",
              "SET_MTA",
              "OPTIONAL_CMD",
              "SHORT_DOWNLOAD",
              "OPTIONAL_CMD",
              "PROGRAM_START",
              "OPTIONAL_CMD",
              "PROGRAM_CLEAR",
              "OPTIONAL_CMD",
              "PROGRAM",
              "OPTIONAL_CMD",
              "PROGRAM_RESET",
              "OPTIONAL_CMD",
              "GET_PGM_PROCESSOR_INFO",
              "OPTIONAL_CMD",
              "GET_SECTOR_INFO",
              "OPTIONAL_CMD",
              "PROGRAM_PREPARE",
              "OPTIONAL_CMD",
              "PROGRAM_NEXT",
              "OPTIONAL_CMD",
              "PROGRAM_MAX",
              "OPTIONAL_CMD",
              "PROGRAM_VERIFY",
              "OPTIONAL_CMD",
              "TRANSPORT_LAYER_CMD",
              "OPTIONAL_CMD",
              "GET_ID",
              "OPTIONAL_CMD",
              "UPLOAD",
              "OPTIONAL_CMD",
              "SHORT_UPLOAD",
              "OPTIONAL_CMD",
              "BUILD_CHECKSUM",
              "OPTIONAL_CMD",
              "DOWNLOAD_NEXT",
              "OPTIONAL_CMD",
              "SET_CAL_PAGE",
              "OPTIONAL_CMD",
              "GET_CAL_PAGE",
              "OPTIONAL_CMD",
              "CLEAR_DAQ_LIST",
              "OPTIONAL_CMD",
              "SET_DAQ_PTR",
              "OPTIONAL_CMD",
              "WRITE_DAQ",
              "OPTIONAL_CMD",
              "SET_DAQ_LIST_MODE",
              "OPTIONAL_CMD",
              "GET_DAQ_LIST_MODE",
              "OPTIONAL_CMD",
              "START_STOP_DAQ_LIST",
              "OPTIONAL_CMD",
              "FREE_DAQ",
              "OPTIONAL_CMD",
              "ALLOC_DAQ",
              "OPTIONAL_CMD",
              "ALLOC_ODT",
              "OPTIONAL_CMD",
              "ALLOC_ODT_ENTRY",
              "OPTIONAL_CMD",
              "START_STOP_SYNCH",
              "OPTIONAL_CMD",
              "DOWNLOAD",
              "OPTIONAL_CMD",
              "MODIFY_BITS",
              "OPTIONAL_CMD",
              "GET_PAG_PROCESSOR_INFO",
              "OPTIONAL_CMD",
              "GET_SEGMENT_INFO",
              "OPTIONAL_CMD",
              "GET_PAGE_INFO",
              "OPTIONAL_CMD",
              "SET_SEGMENT_MODE",
              "OPTIONAL_CMD",
              "GET_SEGMENT_MODE",
              "OPTIONAL_CMD",
              "COPY_CAL_PAGE",
              "OPTIONAL_CMD",
              "GET_DAQ_CLOCK",
              "OPTIONAL_CMD",
              "READ_DAQ",
              "OPTIONAL_CMD",
              "GET_DAQ_LIST_MODE",
              "OPTIONAL_CMD",
              "DOWNLOAD_MAX",
              "COMMUNICATION_MODE_SUPPORTED",
              "BLOCK",
              "SLAVE",
              "MASTER",
              "0x14",
              "0x5"
            ]
          },
          "DAQ": {
            "Name": "DAQ",
            "DataParams": [
              "STATIC",
              "0x3",
              "0x2",
              "0x0",
              "OPTIMISATION_TYPE_DEFAULT",
              "ADDRESS_EXTENSION_DAQ",
              "IDENTIFICATION_FIELD_TYPE_ABSOLUTE",
              "GRANULARITY_ODT_ENTRY_SIZE_DAQ_BYTE",
              "0x4",
              "OVERLOAD_INDICATION_EVENT",
              "PRESCALER_SUPPORTED"
            ],
            "TIMESTAMP_SUPPORTED": {
              "Name": "TIMESTAMP_SUPPORTED",
              "DataParams": [
                "0x1",
                "SIZE_DWORD",
                "UNIT_1US"
              ]
            },
            "DAQ_LIST": [
              {
                "Name": "DAQ_LIST",
                "DataParams": [
                  "0x0",
                  "DAQ_LIST_TYPE",
                  "DAQ",
                  "MAX_ODT",
                  "0x5",
                  "MAX_ODT_ENTRIES",
                  "0x7"
                ]
              },
              {
                "Name": "DAQ_LIST",
                "DataParams": [
                  "0x1",
                  "DAQ_LIST_TYPE",
                  "DAQ",
                  "MAX_ODT",
                  "0x4",
                  "MAX_ODT_ENTRIES",
                  "0x7"
                ]
              },
              {
                "Name": "DAQ_LIST",
                "DataParams": [
                  "0x2",
                  "DAQ_LIST_TYPE",
                  "DAQ",
                  "MAX_ODT",
                  "0x3",
                  "MAX_ODT_ENTRIES",
                  "0x7"
                ]
              }
            ],
            "EVENT": [
              {
                "Name": "EVENT",
                "DataParams": [
                  "\"5ms\"",
                  "\"5ms\"",
                  "0x0",
                  "DAQ",
                  "0xFF",
                  "0x5",
                  "0x6",
                  "0xFF"
                ]
              },
              {
                "Name": "EVENT",
                "DataParams": [
                  "\"extEvent\"",
                  "\"extEvent\"",
                  "0x1",
                  "DAQ",
                  "0xFF",
                  "0x1",
                  "0x9",
                  "0xFF"
                ]
              }
            ]
          },
          "XCP_ON_CAN": {
            "Name": "XCP_ON_CAN",
            "DataParams": [
              "0x100",
              "CAN_ID_BROADCAST",
              "0x52",
              "CAN_ID_MASTER",
              "0x51",
              "CAN_ID_SLAVE",
              "0x50",
              "BAUDRATE",
              "0x7A120"
            ]
          }
        },
        "MEASUREMENT": [
          {
            "Name": "ASAM.M.SCALAR.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "DISPLAY_IDENTIFIER": "DI.ASAM.M.SCALAR.UBYTE.IDENTICAL",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_VERB_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_VERB.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_VERB_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_VERB.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.VTAB_RANGE.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.VTAB_RANGE_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.VTAB_RANGE.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "101",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_INTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_INTP.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_INTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_INTP.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "13",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_NOINTP.DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.TAB_NOINTP_NO_DEFAULT_VALUE",
            "LongIdentifier": "\"Scalar measurement with verbal conversion and default value\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.TAB_NOINTP.NO_DEFAULT_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "13",
            "ECU_ADDRESS": "0x13A00"
          },
          {
            "Name": "ASAM.M.SCALAR.UBYTE.FORM_X_PLUS_4",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.FORM.X_PLUS_4",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "4",
            "UpperLimit": "259",
            "ECU_ADDRESS": "0x13A00",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.SBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-128",
            "UpperLimit": "127",
            "ECU_ADDRESS": "0x13A01",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SBYTE",
            "CONVERSION": "CM.LINEAR.MUL_2",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-256",
            "UpperLimit": "254",
            "ECU_ADDRESS": "0x13A01",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "65535",
            "ECU_ADDRESS": "0x13A02",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.SWORD.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-32268",
            "UpperLimit": "32267",
            "ECU_ADDRESS": "0x13A04",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.ULONG.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "ULONG",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "4294967295",
            "ECU_ADDRESS": "0x13A08",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.SLONG.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "SLONG",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-2147483648",
            "UpperLimit": "2147483647",
            "ECU_ADDRESS": "0x13A0C",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.FLOAT32.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "FLOAT32_IEEE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-1e24",
            "UpperLimit": "1e24",
            "ECU_ADDRESS": "0x13A10",
            "FORMAT": "\"%8.4\""
          },
          {
            "Name": "ASAM.M.SCALAR.FLOAT64.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "FLOAT64_IEEE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-1e308",
            "UpperLimit": "1e308",
            "ECU_ADDRESS": "0x13A14",
            "FORMAT": "\"%8.4\""
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0FF0",
            "LongIdentifier": "\"Scalar measurement with Bitmask for a bit-area\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "BIT_MASK": "0x0FF0",
            "ECU_ADDRESS": "0x13A20",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.SCALAR.UWORD.IDENTICAL.BITMASK_0008",
            "LongIdentifier": "\"Scalar measurement with Bitmask for a single bit\"",
            "Datatype": "UWORD",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "1",
            "BIT_MASK": "0x0008",
            "ECU_ADDRESS": "0x13A20",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.ARRAY_SIZE_16.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ARRAY_SIZE": "16",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\""
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_16_1_1.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "16",
              "1",
              "1"
            ]
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_8_2_1.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "8",
              "2",
              "1"
            ]
          },
          {
            "Name": "ASAM.M.MATRIX_DIM_8_4_2.UBYTE.IDENTICAL",
            "LongIdentifier": "\"Scalar measurement\"",
            "Datatype": "UBYTE",
            "CONVERSION": "CM.IDENTICAL",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "0",
            "UpperLimit": "255",
            "ECU_ADDRESS": "0x13A30",
            "FORMAT": "\"%5.0\"",
            "MATRIX_DIM": [
              "8",
              "4",
              "2"
            ]
          },
          {
            "Name": "ASAM.M.VIRTUAL.SCALAR.SWORD.PHYSICAL",
            "LongIdentifier": "\"Virtual measurement with 2 * ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2 as input (based on the phys value of ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2\"",
            "Datatype": "SWORD",
            "CONVERSION": "CM.VIRTUAL.EXTERNAL_VALUE",
            "Resolution": "0",
            "Accuracy": "0",
            "LowerLimit": "-32768",
            "UpperLimit": "32767",
            "ECU_ADDRESS": "0x0",
            "VIRTUAL": {
              "MeasuringChannel": [
                "ASAM.M.SCALAR.SBYTE.LINEAR_MUL_2"
              ]
            }
          }
        ],
        "RECORD_LAYOUT": [
          {
            "Name": "RL.FNC.UBYTE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SBYTE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SBYTE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UWORD.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SWORD.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.ULONG.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "ULONG",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SLONG.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SLONG",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT32_IEEE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT32_IEEE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT64_IEEE.ROW_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT64_IEEE",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UBYTE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SBYTE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SBYTE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.UWORD.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SWORD.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SWORD",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.ULONG.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "ULONG",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.SLONG.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "SLONG",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT32_IEEE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT32_IEEE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.FNC.FLOAT64_IEEE.COLUMN_DIR",
            "FNC_VALUES": {
              "Position": "1",
              "Datatype": "FLOAT64_IEEE",
              "IndexMode": "COLUMN_DIR",
              "Addresstype": "DIRECT"
            }
          },
          {
            "Name": "RL.AXIS.UBYTE",
            "AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            }
          },
          {
            "Name": "RL.AXIS.UWORD",
            "AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UWORD",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            }
          },
          {
            "Name": "RL.CURVE.SWORD.SBYTE.DECR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CURVE.SWORD.SBYTE.INCR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.AXIS_PTS.SBYTE.DECR",
            "AXIS_PTS_X": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.AXIS_PTS.RES_AXIS",
            "AXIS_RESCALE_X": {
              "Position": "3",
              "Datatype": "UBYTE",
              "MaxNumberOfRescalePairs": "5",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "NO_RESCALE_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "RESERVED": {
              "Position": "2",
              "DataSize": "BYTE"
            }
          },
          {
            "Name": "RL.MAP.SWORD.SBYTE.SBYTE.INCR",
            "AXIS_PTS_X": {
              "Position": "3",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "AXIS_PTS_Y": {
              "Position": "4",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_INCR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "5",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_X": {
              "Position": "1",
              "Datatype": "UBYTE"
            },
            "NO_AXIS_PTS_Y": {
              "Position": "2",
              "Datatype": "UBYTE"
            }
          },
          {
            "Name": "RL.CUBOID.SWORD.SBYTE.DECR",
            "AXIS_PTS_Z": {
              "Position": "2",
              "Datatype": "SBYTE",
              "IndexIncr": "INDEX_DECR",
              "Addressing": "DIRECT"
            },
            "FNC_VALUES": {
              "Position": "3",
              "Datatype": "SWORD",
              "IndexMode": "ROW_DIR",
              "Addresstype": "DIRECT"
            },
            "NO_AXIS_PTS_Z": {
              "Position": "1",
              "Datatype": "UBYTE"
            }
          }
        ]
      }
    }
  }
}